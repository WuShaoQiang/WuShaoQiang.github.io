<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>面试 on Gavin&#39;s Blog</title>
    <link>https://wushaoqiang.github.io/categories/%E9%9D%A2%E8%AF%95/</link>
    <description>Recent content in 面试 on Gavin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Oct 2019 00:06:18 +0800</lastBuildDate>
    
	<atom:link href="https://wushaoqiang.github.io/categories/%E9%9D%A2%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Interview3</title>
      <link>https://wushaoqiang.github.io/posts/interview/interview3/</link>
      <pubDate>Fri, 11 Oct 2019 00:06:18 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/interview/interview3/</guid>
      <description>稍微总结一下今天面试遇到的一些问题以及自己的不足，再接再厉
感觉这篇blog有点像日记了。。。
Link 在前面时间里主要是问了三道和链表相关的题，可能因为平时少练题的缘故，答的不太好
LRU缓存算法 我之前没有听过LRU(Latest Related Used)
在假设一个场景下，一个值被请求，那么下面很有可能会再次多次请求这个值，那么用这种算法能够cache住最新的值，使得效率提高
还好面试官通过解释，我才大概懂得这个LRU是用来干嘛的(但是当时还是没太多思路)
现在用代码大概描述一下
package main type DLinkNode struct { key int val int next *DLinkNode prev *DLinkNode } func addNodeAfter(prev, node *DLinkNode) { node.prev = prev node.next = prev.next if prev.next != nil { prev.next.prev = node } prev.next = node } func removeNode(node *DLinkNode) { if node.prev != nil { node.prev.next = node.next } if node.next != nil { node.next.prev = node.</description>
    </item>
    
  </channel>
</rss>