<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>网络基础 on Gavin&#39;s Blog</title>
    <link>https://wushaoqiang.github.io/categories/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in 网络基础 on Gavin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Sep 2019 15:23:25 +0800</lastBuildDate>
    
	<atom:link href="https://wushaoqiang.github.io/categories/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TCP vs UDP</title>
      <link>https://wushaoqiang.github.io/posts/computer-network/tcp-vs-upd/</link>
      <pubDate>Sun, 29 Sep 2019 15:23:25 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/computer-network/tcp-vs-upd/</guid>
      <description>TCP和UDP的区别这个问题已经遇到过很多次了，有简简单单的回答，也有绞尽脑汁去想，今天来详细总结一下区别吧
面向连接 TCP是面向连接的，也就是说TCP在连接上会有许多事情做，包括拥塞控制，流量控制，超时，重传，确认，序号等等。事情越多，负担就越多，并且对应的报文也比UDP报文要大
关于拥塞控制和流量控制，可以看我别的blog
UDP是没有连接的，我们只需要将数据传递给UDP，因此理论上UDP可支持的并发数要比TCP要高，UDP就会打包好数据传到网络层(IP)。反过来想，UDP这种“无法无天”的传输可能会造成很多不可靠问题。
 UDP没有序号，因此会产生包的乱序问题
 UDP没有流量控制，发太快可能会导致溢出，溢出的包可能因此就不见了
  连接状态 由于TCP是面向连接的，所以会有连接状态
发起连接 在还未连接的时候，客户端的状态为CLOSED，服务器端为LISTEN
 当客户端给服务器端发起一个SYN包的时候，客户端的状态变为SYS_SEND
 服务器端接收到，发一个SYN+ACK包，服务器端的状态变为SYS_RECV
 客户端接收到，并且会发一个ACK包，客户端状态变为ESTABLISH
 服务器端收到后也会变为ESTABLISH
  结束连接 初始状态，客户端和服务器端都为ESTABLISH
 假设客户端发了一个FIN包过去，这个时候客户端状态为FIN_WAIT1
 服务器收到了这个包，并且发送一个ACK包，服务端状态为CLOSE_WAIT
 服务器主动发一个FIN包，状态改为LAST_ACK
 客户端收到服务器的包，并且发送一个ACK包，将状态改为TIME_WAIT
 服务器收到ACK后进入CLOSED状态
 等待一段时间后没收到包，客户端也进入CLOSED
  这里为什么要等待一段时间呢？ 主要是要看最后面客户端给服务端的ACK是否到了，如果中间网络出了问题，服务器端没有收到这个ACK，那么它将会重发FIN，这个时候客户端还能够重新处理这个FIN</description>
    </item>
    
    <item>
      <title>Web请求历程</title>
      <link>https://wushaoqiang.github.io/posts/computer-network/web-request-process/</link>
      <pubDate>Sun, 28 Apr 2019 10:19:02 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/computer-network/web-request-process/</guid>
      <description>这几乎是做后端开发面试的时候必问的一道题，答案可以说得很简单，也可以是很复杂，当然面试官喜欢看到你对此有所深入，因此这篇文章就从头到尾详细的讲一遍这个历程
参考 《计算机网络》
1 当一台电脑将网线插上，网线的另一端是以太网的交换机(交换机能够知道连接它的机器的MAC地址，如果不清楚交换机是什么，建议自己搜一下，这里不做解释)
首先，刚开始电脑是没有IP地址的，这个时候电脑会生成一个DHCP请求报文，这个报文是一个UDP报文，目的端口为67，源端口为68。这个UDP报文被装载到IP报文，有目的IP地址是255.255.255.255，因为电脑不知道可以从哪个IP请求到自己的IP地址，源IP地址是0.0.0.0。再次往下传递就到了链路层，我们这里假设用的是以太网，所以链路层会将网络层的数据包放置在以太网帧中，目的MAC地址为FF:FF:FF:FF:FF:FF，源MAC地址就是你电脑网卡的MAC地址了，这个我们不用关心。这个时候一个广播的报文就做好了
报文被发送到交换机上，因为这是一个广播报文，因此在交换机上连接的所有设备都应该能收到这个报文，包括了DHCP服务器
这里说多一句，现阶段，一般DHCP服务器集成在了路由器上，而这个路由器一般来说是我们的网关(至少在我这边是这样的)，具体如何查的，用wireshark抓包看看吧，抓到DHCP包你就知道了(记得先拔网线再插上)
2 我们假设这个DHCP包已经完整到达了路由，这个路由生成了一个UDP-IP-以太网报文，这个时候数据报里包含了
 分配给电脑的IP
 DNS服务器IP
 默认网关路由器IP
 网络掩码
  这个数据包是具有一个准确的目的MAC地址的(也就是电脑的MAC，我们之前发送的报文里有记录)
所以交换机能够将这个DHCP的响应报文发给电脑
3 刚插上网线呢，就做了这么多东西了
这个时候我们打开浏览器，输入网址域名
这个时候我们需要得到这个域名的IP地址才能与其建立连接
再次构造一个UDP报文，目的端口为53，源端口任意
封装到IP数据包，源和目的IP地址在上面已经得到了，填上
到了链路层需要两个MAC地址，好像我们只有自己的MAC地址，目的MAC地址未知
这个时候电脑会生成一个ARP报文寻找默认网关的MAC地址(这个就不详细说了)
关于DNS报文的所有要的东西都齐全了，发送DNS报文
4 一般来说，常用的域名的IP都会存储在DNS缓存里，因此会比较快速
关于更多的DNS相关的，不在这次范围内
因此我们假设已经在某DNS服务器上拿到了DNS回答报文，这个报文就包括了我们要访问的URL的IP
5 这个时候电脑以及具备和远程的服务器建立TCP连接了
首先先是TCP的三次握手，三次握手在别的文章里讲到
握手成功后，发送请求报文，经过互联网路由器的一系列转发到达了相应的服务器
服务器收到了电脑发送的请求，并做出相应的处理，将结果写入响应报文，按照原来的TCP连接返回给电脑
6 电脑的浏览器通过处理渲染以及加载就呈现出了看到的网页</description>
    </item>
    
    <item>
      <title>关于加密 --基础</title>
      <link>https://wushaoqiang.github.io/posts/computer-network/encryption-basic/</link>
      <pubDate>Wed, 24 Apr 2019 11:03:38 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/computer-network/encryption-basic/</guid>
      <description> 我们现在接触较多的两种加密方式
 对称加密
 公钥加密
  对称加密 利用一样的秘钥，在持有者双方进行加密和解密
但是第一次建立连接并且传输秘钥的时候不安全(当然可以通过其它方式传输)
速度快
公钥加密 用对方的公钥加密，发送给对方，因为只要对方有自己的私钥，因此就算密文半路被拦截，也不会泄露信息
安全性好，但速度慢
结合 结合两种加密方式，创建一个既安全又快的连接
 利用对方公钥加密对称秘钥，发送给对方
 对方收到用自己秘钥解密，得到对称秘钥
 双方用对称秘钥进行接下来的通信
  </description>
    </item>
    
    <item>
      <title>DHCP 和 NAT</title>
      <link>https://wushaoqiang.github.io/posts/computer-network/DHCP-and-NAT/</link>
      <pubDate>Mon, 22 Apr 2019 20:59:55 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/computer-network/DHCP-and-NAT/</guid>
      <description>DHCP(动态主机配置协议) 我们在上网的时候，其实是向某一个ISP请求一个IP地址，这个IP地址是临时的，到期是要被回收的
四个步骤  让DHCP服务器发现客户端：客户端创建一个请求报文，请求端口号为67，但这个时候它连自己的IP地址都不知道(因为还没分配)，就用0.0.0.0:68来代替，但是它也不知道目标地址，所以用广播地址255.255.255.255:67
 DHCP服务器提供：DHCP收到了请求，做出响应，目标地址仍然使用255.255.255.255:68(这里端口号为68.因为客户68端口是接收这个包的)，这个时候客户端已经知道DHCP的位置了
 再次对准确地址发出请求
 DHCP响应
  到这里交互就完成了
NAT(网络地址转换) 这个是普遍使用在学校，家庭，公司等，因为现在IPv4的资源已经枯竭，利用NAT能够使得大家共用一个对外的IP，而内部会有不同的IP(局域网内IP)
比如我在学习请求百度这个网页，百度实际上看到的IP地址是我学校的IP地址，并且将内容返回给这个IP地址，学校再通过NAT转换表把东西转给我
有些人也说道，NAT实质上很大阻碍了IPv6的发展</description>
    </item>
    
    <item>
      <title>IPv4 数据报格式与分片</title>
      <link>https://wushaoqiang.github.io/posts/computer-network/ip-message-field/</link>
      <pubDate>Mon, 22 Apr 2019 20:21:55 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/computer-network/ip-message-field/</guid>
      <description>直接上图  版本号
 首部长度：一般为20
 服务类型：为了区分数据报，有点想女士优先这种
 数据报长度(首部加数据，一般不超过1500字节)
 标识、标志、片偏移：与IP数据报分片有关(别的篇幅讲)
 寿命：每经过一台路由器，TTL减1，若为0的时候，这个数据报就要丢掉了
 上层协议：6代表TCP；17代表UDP
 首部校验和(检验IP数据报比特错误)
 源和目的IP地址
 选项(很少用)
 数据(TCP or UDP报文段)
  IP数据报分片 发送方与目的地路径上的每段链路可能使用不同的链路层协议，且每种协议可能具备不同的MTU
比如以太网的MTU为1500
所以在通过MTU比较小的链路段时，就需要分片了
为了让目的主机执行重装任务，IPv4的设计者将标识、标志、片偏移字段放在IP数据报首部
分别解释这三个字段 标识 发送主机在发送IP数据报的时候，通常会将它发送的每个数据报的标识号加1
所以目的地址收到了很多片，这些片上标识号是同一个数字的，那么它们就是可以组合的
标志 最后一个片的标志比特被设为0，表明已经接收到某个标识的最后一个片
偏移量 毫无疑问，是为了将片重新组织回去的</description>
    </item>
    
    <item>
      <title>HTTP 报文</title>
      <link>https://wushaoqiang.github.io/posts/computer-network/http-message-field/</link>
      <pubDate>Mon, 22 Apr 2019 19:17:47 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/computer-network/http-message-field/</guid>
      <description> 客户向它的套接字接口发送HTTP请求报文和向它的套接字接口接收HTTP响应报文
HTTP是一个无状态协议
报文格式 响应报文格式 常见状态码 //Success 200 OK ：表示请求成功 201 Created ：表示请求成功且新建了资源 202 Accepted ：请求成功，但还没创建资源 //Redirection 301 Moved Permanently ：永久转移，服务器会自动转到新的位置 302 Found ：暂时转移，下次还是用这个URI 304 Not Modified ：服务端已经执行了GET，但文件未变化 //Client Error 400 Bad Request ：报文中存在语法错误 401 Unauthorized ：未认证 403 Forbidden ：对请求资源的访问被服务器拒绝了 404 Not Found ：无法找到指定的资源 //Server Error 500 Internal Server Error :服务器端在执行请求时发生了错误 503 Service Unavailable :服务器暂时处于超负载或正在进行停机维护  </description>
    </item>
    
    <item>
      <title>UDP</title>
      <link>https://wushaoqiang.github.io/posts/computer-network/udp/</link>
      <pubDate>Mon, 22 Apr 2019 16:35:03 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/computer-network/udp/</guid>
      <description>  UDP无连接建立
 不需要维护连接状态
 报文头比TCP小
 能尽可能的快，没有速度限制
  应用场景 对丢包不是很看重，对速度很敏感
 DNS
 SNMP
  报文结构 </description>
    </item>
    
    <item>
      <title>TCP 流量控制</title>
      <link>https://wushaoqiang.github.io/posts/computer-network/tcp-flow-control/</link>
      <pubDate>Mon, 22 Apr 2019 15:17:17 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/computer-network/tcp-flow-control/</guid>
      <description>流量控制是为了匹配发送方和接收方的数据交换速度，如果发送方发的太快，接收方的缓存可能会溢出
还要提醒一下流量控制和拥塞控制是两码事
TCP通过让发送方维护一个称为接收窗口的变量来提供流量控制
在接收方一定要满足
LastByteRcvd - LastByteRead &amp;lt;= RcvBuffer
用rwnd表示还有多少空间可以用，所以rwnd = RcvBuffer - (LastByteRcvd - LastByteRead)
在TCP报文首部里有一个叫做接收窗口，这个就是接收者告诉发送者rwnd的
在发送方，通过将未确认的数据量控制在值rwnd以内，就可以保证接收者不会缓存溢出了
UDP是不提供流量控制的，所以UDP很有可能会出现缓存溢出</description>
    </item>
    
    <item>
      <title>TCP 拥塞控制</title>
      <link>https://wushaoqiang.github.io/posts/computer-network/tcp-congestion-control/</link>
      <pubDate>Mon, 22 Apr 2019 13:11:08 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/computer-network/tcp-congestion-control/</guid>
      <description> TCP必须使用端到端拥塞控制而不是网络辅助的拥塞控制
TCP所采用的方法是让每一个发送方根据所感知到的网络拥塞程度来限制其能向连接发送流量的速率
三个问题 我们如何知道网络开始拥塞？
我们如何限制发送方发送速率
当发送方感受到拥塞时，用什么算法去限制其发送速率
如何知道网络拥塞 TCP是不会有一种特殊的包叫“我拥塞啦”
接收到Ack 没有拥塞，可以提速
没接收到Ack 可能拥塞，降速
如何限制发送方速率 改变cwnd
当一切顺利，cwnd增加；丢包，cwnd减少
我们发送方被限制在min(rwnd,cwnd)
LastByteSent - LastByteAcked &amp;lt;= cwnd
rwnd和cwnd是不同的，前者是表示接收方的buffer还有多少能用，后者是改变在网络上的容量
用什么算法来限制速度 我们希望TCP能在不发生拥塞情况上利用最大的带宽
所以发送方速率有点像三角波，上上下下，因为要尽可能利用带宽又不要制造拥塞
慢启动 在包被收到的情况下 cwnd每次是之前的两倍1,2,4,8,16...，直到大于或等于阈值，切换到拥塞避免
在包没有被收到的情况下 三次冗余Ack 进入快速恢复
超时 阈值=cwnd/2
把cwnd变为1
阈值(threhold) 记录上一次拥塞时一半的cwnd
拥塞避免 在包被接收到的情况下 线性增长，每次在所有分片的Ack被接收到的情况下(一个RTT)，增加一个MSS
在包没有被接收到的情况下 三次冗余Ack 进入快速恢复
超时 切换到慢启动
快速恢复 每个冗余的Ack对cwnd增加一个MSS，当丢失报文段的Ack最终回到时，再减少一个MSS
进入拥塞避免状态
出现超时，进入慢启动
出现丢包，cwnd设置为1，阈值设置为cwnd的一半
总结一下 三次冗余ACK  阈值设置为cwnd/2
 cwnd设置为阈值(有快速恢复的情况下)
  超时  阈值设置为cwnd/2
 cwnd设置为1(MSS)
  </description>
    </item>
    
    <item>
      <title>TCP 连接 --三次握手和四次挥手</title>
      <link>https://wushaoqiang.github.io/posts/computer-network/tcp-connect/</link>
      <pubDate>Mon, 22 Apr 2019 12:52:03 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/computer-network/tcp-connect/</guid>
      <description> 首先这里所说的握手，是进程之间的握手
三次握手 简单来说就是
A --&amp;gt; B 不承载有效负荷 B --&amp;gt; A 不承载有效负荷 A --&amp;gt; B 可以承载有效负荷  再细致点说就是
 客户端应用程序发起一个TCP连接
 发送报文里有SYN
 收到来自服务器端的SYN&amp;amp;ACK
 再次向服务器端发送ACK
  这里面总共有3次报文，所以为三次握手
最大报文段长度&amp;amp;最大传输单元 最大报文段长度(MSS):一般为1460
最大传输单元(MTU):一般为1500
之说以说一般，是因为一般来说TCP/IP的首部字段加起来是40字节
1500-40=1460
清除认识 当进程通过套接字把数据给到TCP的时候，数据就和进程没关系了，已经全权交给TCP了
为什么不是两次握手？ 这是书本上的一个问题
在我理解，握手其实是为了双方知道对方的初始序列号
 客户端给服务器端发送初始序列号
 服务器端收到了客户端的初始序列号，并且发送服务器端的初始序列号
  如果客户端不产生第三次握手，那么服务器端不知道客户端到底拿到了初始序列号没
 客户端看到回复后就知道服务器端拿到了自己的初始序列号，于是也和服务器端说明，已经拿到它的初始序列号了  四次挥手  客户端应用程序发起关闭连接
 发送报文里包含FIN
 服务器端发送一个ACK表示接收到了
 服务器端再次发一个FIN
 客户端给服务器端发一个ACK
 等待一会，资源就释放了
  </description>
    </item>
    
    <item>
      <title>TCP --报文</title>
      <link>https://wushaoqiang.github.io/posts/computer-network/tcp-message-field/</link>
      <pubDate>Mon, 22 Apr 2019 12:14:31 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/computer-network/tcp-message-field/</guid>
      <description> 之间写过一个关于《计算机网络(原书第六版)：自顶向下方法》的一部分笔记，当时没继续写下去是因为觉得一个篇幅太多了，决定分开写，这样可能可以更加详细点，也算是第二次的复习吧
这篇主要讲报文
先看看报文的格式
首先，TCP是运输层的协议，IP是网络层的协议，一般运输层协议会确定端口号，网络层协议则确定IP地址
 源/目的端口号
 序号/确认号：是用来双方实现可靠传输的(下面详细讲)
 接收窗口字段：用于流量控制(可能会在别的篇幅讲)
 首部长度：由于有选项这个字段，使得TCP的首部长度是可以变化的，不过通常就是20字节
 标志字段/紧急指针：标志字段包括确认字段有效、建立和拆除连接、紧急数据。紧急指针指向紧急数据
  序号/确认号 一条TCP连接的双发均可随机地选择初始序号，可能是0和4294967295之间的任意值
我们假设初始序号为0
A --&amp;gt; B Seq=42,ACK=79,data=1 B --&amp;gt; A Seq=79,ACK=43,data=2 A --&amp;gt; B Seq=43,ACK=80,data=3 ...  在我理解
序号是标识我要发送给对方的数据
确认号是标识我需要对方发送给我的数据
所以上面场景就是
A给B发序号为42的数据，并且向B要序号为79的数据 B收到了A的数据，并且返回A所要的序号为79的数据，并且B还想要A序号为43的数据 以此类推...  </description>
    </item>
    
    <item>
      <title>Questions Network</title>
      <link>https://wushaoqiang.github.io/posts/computer-network/questions-network/</link>
      <pubDate>Tue, 26 Mar 2019 17:27:44 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/computer-network/questions-network/</guid>
      <description>这篇文章是要记录在学习网络基础相关知识的时候遇到的问题与解答
IP Q: 为什么我电脑的IP(172.29.15.243)可以访问外面的网络
A: 我们知道某些专用网络的地址在外部是访问不到的，比如学校内部网不可以直接从外部访问，要通过VPN。我们之所以能够用专用网络分配给我们的地址访问外部网络，是因为我们在访问因特网时，IP地址会被NAT转换。
Session 在mega项目里遇到一个问题
首先，我访问服务器，服务器将会返回一个Session给我，那么我在这个网页游走都可以用这个Session，没毛病
现在我Logout，这个时候服务器调用函数将Session的期限变为-1，也就是将Session过期
这个时候我把之前服务器给我的Session自己存起来，用Postman构造一个请求，并且附上这个Session(其实是通过Cookie传)，这个时候服务器不会因为将Session期限改为-1而不认识这个Session
所以这个现象表明所谓的清除只是服务器给浏览器发送的Cookie期限设置为-1，然后浏览器看到Cookie已经过期了，因此就不用了
这样也就验证了，一个用户在服务器上只有一个Session id？
resp.Body resp, err := http.DefaultClient.Do(req) if err != nil { log.Fatalf(&amp;quot;Do Error %s\n&amp;quot;, err) } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) if err != nil { log.Fatalf(&amp;quot;ReadAll Error %s\n&amp;quot;, err) } // fmt.Println(string(body)) file, err := os.Create(path + keyword + &amp;quot;.html&amp;quot;) if err != nil { log.Fatalf(&amp;quot;Create File Error %s\n&amp;quot;, err) } defer file.Close() _, err = file.</description>
    </item>
    
    <item>
      <title>网络协议基础</title>
      <link>https://wushaoqiang.github.io/posts/computer-network/internet-protocal/</link>
      <pubDate>Sun, 17 Mar 2019 01:58:00 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/computer-network/internet-protocal/</guid>
      <description>OSI模型把网络通信的工作分为7层，分别是物理层、数据链路层、网络层、传输层、会话层、表示层和应用层
一直觉得自己的基础很不牢固，事实也确实是这样，希望自己能够系统的总结好计算机网络这本书
二、应用层 Web、电子邮件、DNS和对等文件分发等
2.1 应用层协议原理 2.1.1 网络应用程序体系结构 应用程序体系结构
 客户-服务器体系结构
 对等体系结构(P2P)
  现在大多数应用都是以客户-服务器体系结构
P2P面临的挑战
 下载比上传多很多
 安全性
 用户是否能自愿提供带宽、存储和计算资源
  最近比较火的一个名词区块链就是倡导去中心化的网络，也就是P2P
2.1.2 进程通信 在同一个端系统上(可以理解为同一部电脑)，进程间通信的规则由端系统上的操作系统决定
在不同端系统上，通过跨越计算机网络交换报文来相互通信
2.1.2.1 客户和服务器进程 发起通信的进程就是客户
等待联系的进程是服务器
2.1.2.2 进程与计算机网络之间的接口 进程通过一个称为套接字的软件接口向网络发送报文和从网络接收报文
这个套接字就好比如一个房子的大门，发送或者接收都要先开门
而这里把进程比作房子，运输层协议(TCP等)比作两个房子的路
所以套接字是应用层和运输层的接口，也叫应用程序编程接口(API)
2.1.2.3 进程寻址 主机由IP地址标识
指定的进程由端口号标识
2.1.3 可供应用程序使用的运输服务 根据运输层所提供的服务来决定用哪种运输层协议
2.1.3.1 可靠数据传输 当一个运输协议提供这种服务时，发送进程只要将其数据传递进套接字，就可以完全相信该数据将能无差错地到达接收进程
有些能够容忍数据丢失的应用可以不使用可靠数据传输
2.1.3.2 吞吐量 吞吐量就是发送进程能够向接收进程交付比特的速率
具有吞吐量要求的应用被称为带宽敏感应用
否则就称为弹性应用
2.1.3.3 定时 对于实时要求较高的应用
2.1.3.4 安全性 防止数据以某种方式在两个进程之间被观察到
安全包括
 机密性
 完整性
 端点鉴别</description>
    </item>
    
  </channel>
</rss>