<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GC on Gavin&#39;s Blog</title>
    <link>https://wushaoqiang.github.io/tags/GC/</link>
    <description>Recent content in GC on Gavin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Apr 2019 12:48:58 +0800</lastBuildDate>
    
	<atom:link href="https://wushaoqiang.github.io/tags/GC/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang GC</title>
      <link>https://wushaoqiang.github.io/posts/golang-GC/</link>
      <pubDate>Sat, 27 Apr 2019 12:48:58 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/golang-GC/</guid>
      <description>用了Golang有一段时间了，知道Golang能够自动回收内存也有一段时间了，对于我这种不搞明白原理不甘心系列，今天就来搞明白什么是GC
参考  legendtkl
 Golang UK Conference 2017 | Will Sewell &amp;amp; Jim Fisher - Golang&amp;rsquo;s Realtime GC in Theory and Practice
  算法模型 三色标记算法(Mark-and-sweep)
三色分别为(黑色，灰色，白色)，其中黑色不能够有指针指向白色的数据
 这个算法实现广度优先(BF)
 重复选取一个灰色，将它的所指向的所有对象都变成灰色，自己变成黑色
 这个重复选取直到没有灰色的对象为止
  在上面三个步骤能体会到各个颜色代表的意思(运行阶段)
 黑色：已经遍历过这个对象的所有对象
 灰色：这个对象所指向的对象还没有被遍历过
 白色：它被指向的节点是灰色、或者它根本没有被指向(这就是垃圾)
  结束阶段里，按算法所解释的，是不会再有灰色了，只有
 黑色：有用的数据
 白色：已经不可能到达的数据(垃圾，会被清理)
  回收时主要的流程  从root开始找到所有可达的对象，标记灰色
 执行我们前面所说的模型里的循环
 在处理完循环后，清理所有白色标记的对象
  小结 其实GC还有很多很多的细节，笔者只是在这里先建立一个概念，等后面到达一定阶段再去看看具体的实现
2019.05.06 今天在看了一个视频
在最后面讲到GC的问题的时候，发现GC的一个问题
 对象太多的时候，GC会大量占用CPU  是怎么一回事呢，因为对象越多，GC在遍历的时候需要的资源就越多，所以会导致CPU被大量占用(因为GC是多协程并发的)</description>
    </item>
    
  </channel>
</rss>