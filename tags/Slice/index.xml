<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Slice on Gavin&#39;s Blog</title>
    <link>https://wushaoqiang.github.io/tags/Slice/</link>
    <description>Recent content in Slice on Gavin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 May 2019 11:36:45 +0800</lastBuildDate>
    
	<atom:link href="https://wushaoqiang.github.io/tags/Slice/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang Slice底层</title>
      <link>https://wushaoqiang.github.io/posts/golang-slice/</link>
      <pubDate>Sun, 05 May 2019 11:36:45 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/golang-slice/</guid>
      <description>参考 golang blog
之前一直对slice有一定的误解
误解  以为是引用传递
 以为子函数改变切片，主函数会跟着变
 以为扩容只是简单的内存扩大
  开始 我们可以把byte的slice比喻成
type sliceHeader struct { Length int Capacity int ZerothElement *byte }   slice的传递是值传递，类似一个结构体的传递  这意味着，我们把一个slice传入到函数里，在主函数上的slice可能是不变的
为什么说可能，我们来看一下情况
值传递 发生扩容 这种情况下，切片所指向的数组发生变化，因此和原来的那块内存失去了联系
长度发生改变 在子函数里面，切片长度发生改变并不会影响主函数切片的长度(值传递)
同理容量也是
唯一造成影响 所以唯一能够在子函数里面影响主函数切片的方法只有一种
就是指向的数据数组，子函数修改了相同内存空间的数组，主函数切片也会跟着改变(只有不扩容的情况下才会维持同一个数组内存地址)
小结 不要认为切片是引用传递(很多博客为了方便解释会这样说)，它们唯一能够达到这个效果的情况是共用同一个数组，只要对切片底层认识够深就不会被这个困惑
记住切片是值传递
切片指针传递 我们也可以传递一个切片的指针，这个时候类似于传入一个指向结构体的指针
注意指针
这个指针并不是说数组数据的指针，而是指向这个切片结构体的指针
这个时候和上面的值传递就有很大的不同了
长度、容量、数组指针发生改变 因为是指针传递，改变这个切片的任何东西都会影响到主函数的切片，因此无论是长度发生改变、扩容导致容量发生改变、扩容导致数组指针发生改变，主函数的切片都能看见这些改变
 切片在扩容的时候，指针会发生改变(以前的数据会复制到新的内存上，新的内存能够存储更多数据)
 在容量大于长度的时候，不会进行扩容
  小结 对切片进行指针传递才是真正的引用传递，所有的改变都不会产生新的切片变量
用途 一般来说我们都会选择使用值传递，我们只要看什么时候需要用指针传递
 当你不清除一个切片到程序最后有多少个元素(也就是无法提前估计容量)，但是你又需要把所有结果放入这个切片，这个时候要用指针传递(这里说的是传入给函数参数)  为什么呢？
由于切片扩容的时候，改变了数据的指向。值传递切片不会因为子函数改变了指向而改变指向(事实上我们需要改变指向)
给个例子吧
这是一个二叉树所有根节点到叶子节点路径的程序
type TreeNode struct { Val int Left *TreeNode Right *TreeNode } func binaryTreePaths(root *TreeNode) []string { if root == nil { return nil } res := make([]string, 0) findPaths(root, &amp;quot;&amp;quot;, &amp;amp;res) return res } func findPaths(root *TreeNode, str string, result *[]string) { if root.</description>
    </item>
    
  </channel>
</rss>