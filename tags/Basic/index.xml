<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Basic on Gavin&#39;s Blog</title>
    <link>https://wushaoqiang.github.io/tags/Basic/</link>
    <description>Recent content in Basic on Gavin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Aug 2019 16:35:47 +0800</lastBuildDate>
    
	<atom:link href="https://wushaoqiang.github.io/tags/Basic/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Design Pattern Basic</title>
      <link>https://wushaoqiang.github.io/posts/design-pattern/design-pattern-basic/</link>
      <pubDate>Sun, 04 Aug 2019 16:35:47 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/design-pattern/design-pattern-basic/</guid>
      <description>简单的记录一下最近遇到的设计模式，希望能够多点吸取一些软件设计上的经验
简单工厂模式 简单工厂模式和工厂模式还不一样，简单工厂模式和工厂模式的很主要的区别在于是否违反了开放-封闭原则。
在简单工厂里，Fac是一个类，它按照条件来产生不同的实体工厂，比如很简单的运算
type Operator interface { GetResult(num1 int, num2 int) int } type OperatorFac struct { } func (fac OperatorFac) CreateOperator(op string) Operator { switch op { case &amp;quot;+&amp;quot;: return AddOperate{} case &amp;quot;-&amp;quot;: return SubOperate{} } } type AddOperate struct { } func (addOp AddOperate) GetResult(num1 int, num2 int) int { return num1 + num2 } type SubOperate struct { } func (subOp AddOperate) GetResult(num1 int, num2 int) int { return num1 - num2 } func main() { fac := OperatorFac{} op := fac.</description>
    </item>
    
    <item>
      <title>Design Principle Basic</title>
      <link>https://wushaoqiang.github.io/posts/design-pattern/design-principle-basic/</link>
      <pubDate>Sun, 04 Aug 2019 14:40:18 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/design-pattern/design-principle-basic/</guid>
      <description>这几天阅读了一份代码，让我对设计模式有了很大兴趣，看到别人写的代码如此优雅，自己对代码的追求也跟着提高了
写一个代码，不仅是要把当前的业务实现了，还要注意代码的整洁性，可读性，高可维护性等(我暂时就只知道这些了)
而设计模式是为了我们整体代码的一个高可维护性，无论是对项目的设计，还是对某一个具体的功能实现，都有着很大的作用
下面我就想简单的介绍一下我最近接触到的设计原则，并且结合&amp;lt;&amp;lt;大话设计模式&amp;gt;&amp;gt;这本书来进行稍微系统的理解
单一职责原则 从程序角度来解释
 就一个类而言，应该仅有一个引起它变化的原因
软件设计真正要做的许多内容，就是发现职责并把那些职责相互分离。
如果你能够想到多于一个的动机去改变一个类，那么这个类就具有多于一个的职责
 举个栗子
如果一个类，包含了一件物体的移动，又包含了这个物体的增加和删除，这个类所承担的职责过多了，把这些职责耦合在一起，可能会导致：当一个职责发生变化时，会影响另一个职责
那么它理论上是可以拆分成两个类的
单一职责原则是一个比较普遍被接收的原则，它有助于程序员针对某一个非常具体的一类功能进行开发
不仅类有单一职责的原则，函数其实也是可以做到单一职责的
无论是什么样的项目，都应该遵守这一原则，有助于提高维护性，扩展性以及可读性
开发-封闭原则  软件实体(类、模块、函数)应该是可扩展，但是不可修改
 对于扩展是开放的，对于修改是封闭的，这句话让我感觉就是在说接口这个概念
比如说，我要实现一个server和client的通信方式，我就用这个通信方式来让双方交流数据
一开始定的方案是用HTTP请求来实现API，实现好了，发现速度太慢，这时候要换一种通信方式，这个时候如果修改除了通信方式之外的代码，就违背了开放-封闭原则了
按照这个原则，模块是可扩展的，也就是说我只是换一个通信方式，但是对于server和client应该是无感知的，或者低感知的，也就是说我的业务逻辑应该不受影响
这个时候这种可能需要改变的地方(类)，我们应该将它抽象出来，成为一个接口，而HTTP、RPC等通信示例只是实现了这个接口，对通信层之上的业务层等应该是无感知的
用生活的例子来说就是，老板让我买一个鼠标，他不管我在哪个平台买，不关心我买的方式
与单一职责的对比
刚开始接触设计模式，都会觉得每一个设计模式或者原则都在描述差不多的东西，因此作对比就能突出它们的不同，以及应用场景
可以看见上面的例子，我们只是想换一个通信方式，利用开放-封闭原则，我们知道将通信方式抽象成一个接口，利用不同的通信示例来实现接口就好
单一职责，这里的通信接口确实是只负责通信，并且也只有要通信的时候才会被触发，它的动机是唯一的，因此就算我们实现了不同的示例方法，它的动机依旧唯一，所以也没有违背单一职责
依赖倒置原则 依赖倒置的原则
 高层模块不应该依赖底层模块，两个都应该依赖抽象(接口)
 抽象不应该依赖细节，细节应该依赖抽象(这里的细节可以理解为实例)
  一个软件的架构很多时候就是为了把一些接口定义好，让不同开发人员依赖这个接口来编程，这样互相之间就不用知道对方的具体实现了，哪怕有一边突然要换一个实现方式，另外一边也不用改变(只要接口不变)
所以设计一个稳定的接口是软件设计的关键一步
所以面向对象编程变成了面向接口编程
在编程上，应该尽可能的让各个组成部分面向抽象编程，而不是面向细节
一个很好理解的例子 一部电脑，如果显然是内存的问题，那么就应该和CPU等其它硬件没有关系，只要替换内存，电脑便能继续工作，这就是单一职责，互不影响。
再比如说，如果内存不够，只需要往内存插槽里添加内存条即可，这就是开放-封闭原则，我们只是扩展了，并没有修改原来的东西
无论是主板还是CPU、内存等都是针对接口设计的，我们不能因为买了联想的电脑，就不能用三星的固态了吧
这是不合理的，我们也经常说到兼容性问题，这个问题的原因可能就是接口不是完全吻合，出现了不兼容。
所以只要某某品牌的内存实现了某一个接口，那么它理论上是可以在所有符合该内存插槽接口的主板上使用的，这种就是依赖倒置，依赖的并不是这个内存条，而是这个接口，这个接口是抽象的，所以我并不关心某个公司内存条具体是如何实现的
迪米特法则 这个法则其实很简单
 如果两个类不必直接通信，那么这两个类就不应当发生直接的相互作用，如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用
 一般在软件设计的时候都会有层次架构，层层渐进。
哪个很简单的例子，我们一般直接在应用层调用底层的数据库操作的，一般我们都会封装一个model层，专门来实现与数据库的操作
一句话概括就是：能不暴露出去的尽量不暴露，也就是说尽量不公开让别人调用
原理还是耦合度，暴露的越少，那么和别的组件耦合就会越松，程序相对好维护</description>
    </item>
    
    <item>
      <title>Javascript Array</title>
      <link>https://wushaoqiang.github.io/posts/front-end/javascript-array/</link>
      <pubDate>Sun, 28 Jul 2019 10:36:10 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/front-end/javascript-array/</guid>
      <description>Reference 阮一峰
数组的创建 假设我们创建一个数组
var arr = new Array(10)  其实这个数组是没有key的，但是我们却能够用下标访问，并且可以越界
Object.keys(arr) //[] arr[0] //undefined arr[100] //undefined  一般来说不推荐这种创建数组的方式
var arr1 = [undefined,undefined] Object.keys(arr1) //[&amp;quot;0&amp;quot;,&amp;quot;1&amp;quot;]  静态方法 Array.isArray()
因为typeof对于数组智能返回一个object
所以我们可以用Array.isArray()来判断这个是否为数组
从这里我们可以看到，array也是一个对象
所以会有接下来的方法
valueOf() &amp;amp;&amp;amp; toString()
valueOf 会把数据结构原封不懂的输出
typeof arr.valueOf() //object Array.isArray(arr.valueOf()) //true  说明它又是输出一个数组呀
那么toString就不同了，这个会把元素一个个拆分，然后用逗号隔开组成一个string
//数组 [1, 2, 3, Array(3), &amp;quot;aa&amp;quot;] //toString结果 &amp;quot;1,2,3,4,5,6,aa&amp;quot;  push() pop() shift() unshift()
push和unshift都是往数组增加元素
pop和shift都是减少数组元素
push和pop都是在针对数组后面的元素
shift和unshift都是针对数组前面的元素
join()
这个会返回一个字符串，默认用逗号分隔，也可以传入分隔符
如果是undefined或者null会被转换为空字符串
concat
concat是数组的加法，可以将在原数组的基础上加上传入的参数，返回一个新的数组，原数组不变
要注意的是
如果数组成员包含对象，concat方法返回的是一个浅拷贝，也就是新数组拷贝的是对象的引用</description>
    </item>
    
    <item>
      <title>Javascript Object</title>
      <link>https://wushaoqiang.github.io/posts/front-end/javascript-object/</link>
      <pubDate>Sat, 27 Jul 2019 14:44:02 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/front-end/javascript-object/</guid>
      <description>本篇笔记是学习阮一峰老师的ES6
关于对象 Javascript所有对象都继承自Object
所以一般对象有两种方法集：
 Object本身的方法
 对象实例的方法
  Object() 我们可以使用Object()来强制类型转换，将任意值转换为一个对象
我们可以分为三种情况
 空对象
 Object()
 Object(null)
 Object(undefined)
  需要转换
 Number
 String
 Boolean
  不需要转换
 Array
 Object
 Function
   不需要转换的可以有Object(...) === Object(...) //true
但是Object(undefined) === Object(undefined) //false
静态方法 Object.keys() Object.getOwnPropertyNames()  这两者的区别在于Object.getOwnPropertyNames能够返回不可枚举的属性名
什么叫不可枚举的属性名呢?
类似一个数组包含了两个元素let a = [11,22],那么Object.keys返回的就是[&amp;quot;0&amp;quot;,&amp;quot;1&amp;quot;],而另一个方法返回的是[&amp;quot;0&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;length&amp;quot;]
这里面的length就是一个不可枚举的属性名
不过我们一般情况下是不希望将不可枚举的属性名抽取出来的，所以我们一般是用Object.keys()
Object.prototype.getOwnPropertyDescriptor
这个方法只能够用于自身的属性，作用是给出某个属性的详细信息(属性描述对象)
{ value: 123, //值 writable: false, //是否可写 enumerable: true, //是否可遍历(是否可以用Object.</description>
    </item>
    
    <item>
      <title>Typescript Basic Primitive</title>
      <link>https://wushaoqiang.github.io/posts/front-end/typescript-basic-primitive/</link>
      <pubDate>Tue, 23 Jul 2019 22:41:52 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/front-end/typescript-basic-primitive/</guid>
      <description>I am using Typescript about 2 weeks on my team&amp;rsquo;s project until now.
But I am very new on front-end, and I have never learned Javascript or Typescript before. So, I decided to learn from open-source-tutorial.
I planed to spend a week or two weeks to learn the basic syntax about JS and TS, so I will write some blogs to record the process and make a summary at the end.</description>
    </item>
    
    <item>
      <title>Linux Account</title>
      <link>https://wushaoqiang.github.io/posts/linux/linux-account/</link>
      <pubDate>Mon, 22 Jul 2019 20:55:48 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/linux/linux-account/</guid>
      <description>Today, I want to login my Ubuntu as root. But, I don&amp;rsquo;t even remember I have set a password for root.
Fortunately, I learned some skills about how to manage accounts in linux, so I figure it out very quickly, I hope this experience can be helpful for you if you have the same(similar) problems
UID and GID When you login in a linux system, you must have a user and its password.</description>
    </item>
    
    <item>
      <title>Linux How to Identify Command</title>
      <link>https://wushaoqiang.github.io/posts/linux/linux-how-to-identify-command/</link>
      <pubDate>Mon, 22 Jul 2019 20:12:30 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/linux/linux-how-to-identify-command/</guid>
      <description>Today, I want to talk about a small topic &amp;ndash; how to identify a command
Specifically, If you want to know where are these commands from, there are three possibilities:
 builtin
 alias
 file(external)
  Let&amp;rsquo;s try it type cd // Of course, cd is a builtin command &amp;gt; cd is a shell builtin type ll &amp;gt; ll is aliased to `ls -alhF&#39; type mongod &amp;gt; mongod is /usr/local/mongodb/bin/mongod  Basically you don&amp;rsquo;t need to add any flags</description>
    </item>
    
    <item>
      <title>Linux Windows File</title>
      <link>https://wushaoqiang.github.io/posts/linux/linux-windows-file/</link>
      <pubDate>Sun, 21 Jul 2019 14:03:46 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/linux/linux-windows-file/</guid>
      <description>In linux, [Enter] =&amp;gt; LF
But in windows, [Enter] =&amp;gt; CRLF
So, if we cp a shell script file from windows to linux, we may not be able to run it because of the line break character is different
we need a tool to transform between windows(DOS) and linux(UNIX)
dos2unix [-kn] file [newfile] unix2dox [-kn] file [newfile] unix2mac [-kn] file [newfile]   k: keep modified date
 n: create new file</description>
    </item>
    
    <item>
      <title>Linux Vim Basic</title>
      <link>https://wushaoqiang.github.io/posts/linux/linux-vim-basic/</link>
      <pubDate>Sun, 21 Jul 2019 12:58:40 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/linux/linux-vim-basic/</guid>
      <description>Last time, we talked about linux compression
This time, I am gonna talk about basic usage about vim
vim is a highly recommended editor in UNIX-Like system, so it is necessary to learn that
To be honest I am not one of the vim-fans. Mostly, I use other editor(like VScode) or IDE to develop software, I use vim only when I just want to edit a config file or just couple lines of code which is not worth opening a editor(or IDE)</description>
    </item>
    
    <item>
      <title>Linux Compression</title>
      <link>https://wushaoqiang.github.io/posts/linux/linux-compression/</link>
      <pubDate>Sun, 21 Jul 2019 10:04:02 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/linux/linux-compression/</guid>
      <description>Last day, we took a quick look on file system, I just want to give you guys some basic understanding about that, If you are a software developer(engineer), may be that&amp;rsquo;s enough for you.
Today, let&amp;rsquo;s talk about a very basic and useful tool in linux &amp;ndash;&amp;gt; compression
Quick talk Basically, we use compression all the time, including surfing the internet, the server will give client(browser mostly) the compressed data instead of raw data which may cause the performance slow.</description>
    </item>
    
    <item>
      <title>Linux Link</title>
      <link>https://wushaoqiang.github.io/posts/linux/linux-link/</link>
      <pubDate>Sat, 20 Jul 2019 21:12:36 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/linux/linux-link/</guid>
      <description>We have already talked about disk management, now we have a pretty simple topic&amp;ndash;link
Link is one of the file types in linux including hard link and symbol link
Let&amp;rsquo;s get into them
hard link Remember inode?
when we type ls -l, the second field is the inode number which means how many file(s) is using the same inode.
Right, hard link file is using the same inode, and inode including the file information like permission, block number.</description>
    </item>
    
    <item>
      <title>Linux Disk Manage</title>
      <link>https://wushaoqiang.github.io/posts/linux/linux-disk-manage/</link>
      <pubDate>Sat, 20 Jul 2019 16:20:50 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/linux/linux-disk-manage/</guid>
      <description>Now, let&amp;rsquo;s get into the disk management of linux
Concept There are some concepts you should know about linux file system
Why we need to operate format before OS can use it?
Because different Operate System may use different file system, like FAT, NTFS, Ext2 etc.
After we know there are so many different file system, let&amp;rsquo;s talk about linux file system.
Here are some concepts:
 superblock: superblock will store file system information(like inode number, block number, etc.</description>
    </item>
    
    <item>
      <title>Linux Search File</title>
      <link>https://wushaoqiang.github.io/posts/linux/linux-search-file/</link>
      <pubDate>Sat, 20 Jul 2019 15:14:46 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/linux/linux-search-file/</guid>
      <description>Last time, I shared about how to read file content, and the most useful command
Today, I will make a little cover about searching file
which I do use a lot which to find binary file
which ls //output /bin/ls  It is a simple command to help us searching the binary file
locate locate is a powerful search command which is using database searching
locate filename //search included filename locate -i filename //ignore case locate -r regexp //use regular expression to search  As we can see the commands above there, we can also do any search with it</description>
    </item>
    
    <item>
      <title>Linux Read File</title>
      <link>https://wushaoqiang.github.io/posts/linux/linux-read-file/</link>
      <pubDate>Sat, 20 Jul 2019 14:31:21 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/linux/linux-read-file/</guid>
      <description>Last time, I talked about how to operate file like copy, move or remove
Today, let&amp;rsquo;s see how many ways do we have to read file content, I will introduce some basic and useful commands
cat cat filename will print all the content at once, so it is helpful when you just simply want to print the file content
cat -n filename // show the line number  but if the file is large(like 100M+), you may not want to use this.</description>
    </item>
    
    <item>
      <title>Linux File System Basic Command</title>
      <link>https://wushaoqiang.github.io/posts/linux/linux-file-system-basic-command/</link>
      <pubDate>Sat, 20 Jul 2019 11:39:18 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/linux/linux-file-system-basic-command/</guid>
      <description>Basic Command Last time, I shared about permission
Today the topic is Basic Command of File System
I am gonna give you some simple command you can use in your daily working situation
cd //enter a directory pwd //show the work directory(Print Working Directory)  mkdir
mkdir -m // set directory permission when create mkdir -p // If parent directory doesn&#39;t exist, it will help you create when you add -p flag  rmdir</description>
    </item>
    
    <item>
      <title>Linux Permission</title>
      <link>https://wushaoqiang.github.io/posts/linux/linux-permission/</link>
      <pubDate>Sat, 20 Jul 2019 10:31:23 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/linux/linux-permission/</guid>
      <description>Today, I am gonna talk about linux permission which is very basic for linux user.
Basically, we have three different role in linux
Owner Group Other  It is easy to understand what they mean.
ls -al In your home directory, type ls -al command and click Enter, you will see the output like:
-rw------- 1 user group 254 Oct 22 2018 .xsession-errors.old  Fields meaning As we can see, this line include several field separated by white space</description>
    </item>
    
    <item>
      <title>CSS Basic Property</title>
      <link>https://wushaoqiang.github.io/posts/front-end/css-basic-property/</link>
      <pubDate>Sat, 13 Jul 2019 15:01:30 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/front-end/css-basic-property/</guid>
      <description>最基本的一些属性
text-align 文本对齐方式
 justify 对齐文本容器的左右两边
 center 每一行左右间距一样
 right
 left
  width 指定容器大小，可以接受不同的单位
常见单位：
 px 像素
 % 百分比
 em 根据父元素的倍数
 rem 根据根元素的倍数
 vh view-high
 vw view-width
 max/min
  刚开始学习前端会不知道这个百分比是以什么为基准的
宽度会相对于父元素的宽度 高度会相对与父元素的高度 字体大小会相对父元素字体大小 边界是相对自身的  一些标签  strong 加粗
 u 下划线
 em 斜体
 s 横线(画在字体中间)
 hr 水平线(无close tag)
  box-shadow  The box-shadow property takes values for offset-x (how far to push the shadow horizontally from the element), offset-y (how far to push the shadow vertically from the element), blur-radius, spread-radius and a color value, in that order.</description>
    </item>
    
    <item>
      <title>CSS Basic</title>
      <link>https://wushaoqiang.github.io/posts/front-end/css-basic/</link>
      <pubDate>Sat, 13 Jul 2019 13:46:54 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/front-end/css-basic/</guid>
      <description>主要记录一下CSS的基本语法
以标签来选择 以标签来选择可能并不是很好的选择，一旦项目规模大，这种是不好管理的
后代选择器 div strong //这个是指凡是在div下面的strong标签，都会起作用 要注意 后代并不是单单指一代 子代选择器 div&amp;gt;strong //这个和后代选择器很大的不同就是这个只会选择子代 相邻兄弟选择器 div&amp;gt; p+h1 //二者有共同的父元素  id、class选择器 id
#pro{ }  class
.important{ }  也可以组合一些，下面给一些例子
.important.warning{ }  这个属性要在class=&amp;quot;important warning&amp;quot;同时拥有这两个属性才可以有这里面的样式
或者
.important p{ }  属性选择器 选择属性
a[href]{ color: red; }  只改变有href属性的a标签</description>
    </item>
    
    <item>
      <title>CSS3 Basic</title>
      <link>https://wushaoqiang.github.io/posts/front-end/css3-basic/</link>
      <pubDate>Sat, 13 Jul 2019 13:02:09 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/front-end/css3-basic/</guid>
      <description>主要针对CSS3
本篇是笔记，因此覆盖会不全面
####Reference
w3school
border div { border:2px solid #ffffff; border-radius:25px; -moz-border-radius:25px; /* Old Firefox */ }  border控制边界的大小，形状和颜色
border-radius控制着边框的弯曲的半径，随着数字越大，边框会越弯
transition div { width:100px; height:100px; background:yellow; transition:width 10s; -moz-transition:width 2s; /* Firefox 4 */ -webkit-transition:width 10s; /* Safari and Chrome */ -o-transition:width 2s; /* Opera */ } div:hover { width:300px; }  这个的效果就是在div上悬停，就会将div的宽度在一定时间内切换到另一个指定的宽度
可以看到，需要在transition那里声明哪个属性变化
如果要有多个属性变化(比如 width和height都变)
div { width:100px; height:100px; background:yellow; transition:width 2s, height 2s; -moz-transition:width 2s, height 2s, -moz-transform 2s; /* Firefox 4 */ -webkit-transition:width 2s, height 2s, -webkit-transform 2s; /* Safari and Chrome */ -o-transition:width 2s, height 2s, -o-transform 2s; /* Opera */ } div:hover { width:200px; height:200px; transform:rotate(180deg); -moz-transform:rotate(180deg); /* Firefox 4 */ -webkit-transform:rotate(180deg); /* Safari and Chrome */ -o-transform:rotate(180deg); /* Opera */ }  可以看到只是简单的用逗号隔开就可以了</description>
    </item>
    
    <item>
      <title>CSS Flexble</title>
      <link>https://wushaoqiang.github.io/posts/front-end/css-flexble/</link>
      <pubDate>Fri, 12 Jul 2019 19:30:30 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/front-end/css-flexble/</guid>
      <description>今天来学习一下布局方式
现在主流的布局方式flexbox
Reference https://css-tricks.com/snippets/css/a-guide-to-flexbox/
Basic display: flex就将这个block变成了flexbox
首先，我们要先搞明白container和item的关系
一般来说item是最小的单位，也就是一个东西(比如：按键&amp;hellip;)
container就是我们的block，这个就是在页面设计的时候考虑要如何放置我们的block，container是可以嵌套的
Axis For rows, the main axis is a horizontal line and for columns it is a vertical line.
首先要搞懂轴的概念
轴的方向是和flex-direction相关联的
根据参数我们可以很快确定轴的方向
row //main 左到右 cross 上到下 column //main 上到下 cross 左到右 row-reverse //... column-reverse //...  比如flex-direction: row，那么就按照上面这个图的方向
 主方向为横向(也就是item的排列方向)
 cross方向为纵向
  我们后面说到的属性可能会和轴有联系
而这篇文章也是假设了flex-direction: row
flex-wrap 可选参数
nowrap (default) //这个就是将所有item按一个方向排列并且不会，并且只有一行 wrap //这个相对上面就会进行换行 wrap-reverse //反转,就是和wrap反过来，从底部到顶部  可以看出这个和两个轴都有关系
先在main轴排列，不过空间可以wrap到cross轴</description>
    </item>
    
    <item>
      <title>Javascript Data Structure</title>
      <link>https://wushaoqiang.github.io/posts/front-end/javascript-data-structure/</link>
      <pubDate>Tue, 09 Jul 2019 21:43:45 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/front-end/javascript-data-structure/</guid>
      <description>array method 内置的Array方法是普遍使用的
push() unshift() pop() shift() splice() //第一个参数的index(包括),第二个参数是数量(表示删除多少个)  splice splice相对前几个方法稍微复杂一点，它的功能也相对强大
当splice传入两个参数的时候
function sumOfTen(arr) { // change code below this line arr.splice(4,2) arr.splice(2,1) arr.splice(0,1) console.log(arr) // change code above this line return arr.reduce((a, b) =&amp;gt; a + b); } // do not change code below this line console.log(sumOfTen([2, 5, 1, 5, 2, 1]));  注意
当你删除了元素之后，索引就已经发生变化了，所以最好的方式就是重后面开始删除
当传入三个参数的时候
这和传入两个参数是完全不一样的
三个参数就是先执行两个参数时的操作，也就是删除从某一个索引开始的n个数据，然后再从索引的位置插入一个数据
function htmlColorNames(arr) { // change code below this line arr.</description>
    </item>
    
    <item>
      <title>Javascript Debugging</title>
      <link>https://wushaoqiang.github.io/posts/front-end/javascript-debugging/</link>
      <pubDate>Tue, 09 Jul 2019 21:19:39 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/front-end/javascript-debugging/</guid>
      <description>Bug一般分为三类
语法错误 运行错误 逻辑错误  往往编辑器帮我们做好了语法错误的检测，因此这个是最简单的，后面两个就要我们自己掌握一些debug的技能去fix这些bugs
log log是一个很好的debug方法，能够在不同阶段看到输出的内容有利于我们找出出错的环节
console.log()  typeof 检测一个值的类型
undefined --&amp;gt; undefined NaN --&amp;gt; Number null --&amp;gt; Object  false 在JavaScript里
false 0 &amp;quot;&amp;quot; NaN undefined null  都被当做falsy，也就是在if判断语句和false作用一样的
out of range 当数组越界的时候，JavaScript返回的是undefined</description>
    </item>
    
    <item>
      <title>Javascript Regexp</title>
      <link>https://wushaoqiang.github.io/posts/front-end/javascript-regexp/</link>
      <pubDate>Mon, 08 Jul 2019 22:46:16 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/front-end/javascript-regexp/</guid>
      <description>这一篇是讲正则表达式(Regular Expression)
Test method 全匹配
let waldoIsHiding = &amp;quot;Somewhere Waldo is hiding in this text.&amp;quot;; let waldoRegex = /Waldo/; // Change this line let result = waldoRegex.test(waldoIsHiding); console.log(result) //true  全匹配是大小写敏感的
多可能性
let petString = &amp;quot;James has a pet cat.&amp;quot;; let petRegex = /dog|cat|bird|fish/; // Change this line let result = petRegex.test(petString);  这样就是一个或关系
忽略大小写
let myString = &amp;quot;freeCodeCamp&amp;quot;; let fccRegex = /freeCodeCamp/i; // Change this line let result = fccRegex.</description>
    </item>
    
    <item>
      <title>Javascript ES6</title>
      <link>https://wushaoqiang.github.io/posts/front-end/javascript-ES6/</link>
      <pubDate>Sun, 07 Jul 2019 16:28:43 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/front-end/javascript-ES6/</guid>
      <description>let vs var 在ES6之前还没有let
var是有一些很严重的缺点的，比如
可以重复定义同名的变量而不会抛错 经常想定义一个局部变量，变成了一个全局变量，也就是shadow和我们平时熟悉的方式不一样  所以我们在定义变量的时候就用let，因为let就是修复了var的一些缺点，和平时的用法一样
const 这个和let差不多，只是只能赋值一次(定义的时候就要赋值)
并且建议const用全部大写的格式
开发建议是：如果变量是不会重新赋值的，那么最好是使用const，除非是预测到要重新赋值就用let
在这里还要强调的一点，赋值是值这个变量的赋值，如
const s = [5,6,7] s = [1,2] //出错，重新赋值 s[2] = 10 //可行，这个不是对s的重新赋值  同理的还有Object、function
Object freeze 可以防止一个Object的属性被修改
Object.freeze(object_name);  Arrow functions () =&amp;gt; {} () =&amp;gt; value //如果是直接返回数据，这个是简化的写法 (arg1,arg2) =&amp;gt; {}  filter map reduce A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.</description>
    </item>
    
    <item>
      <title>Javascript Basic</title>
      <link>https://wushaoqiang.github.io/posts/front-end/javascript-basic/</link>
      <pubDate>Wed, 03 Jul 2019 20:35:35 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/front-end/javascript-basic/</guid>
      <description>数组的方法 push 插入数据到数组的后面 pop 取出数组的最后一个数据 shift 取出数组的第一个数据 unshift 插入数据到数组的前面  JS的数组里面的元素是可以不相同的
作用域 当变量没有用var等关键字声明时，这个变量是全局变量，这个可能会导致一些问题
function func(){ funcVar = 1 }  等于号 比较符有两个==和===
在JS里面
1 == &#39;1&#39; //true 1 === &#39;1&#39; //false  ==会在类型不同进行自动转换
===不会进行类型转换
同理!=和!==也是一样
比较符 &amp;gt; &amp;lt; &amp;gt;= &amp;lt;=
这些当类型不同时，也会进行类型转换
Switch function caseInSwitch(val) { var answer = &amp;quot;&amp;quot;; // Only change code below this line switch(val){ case 1: answer = &amp;quot;alpha&amp;quot;; break; case 2: answer = &amp;quot;beta&amp;quot;; break; case 3: answer = &amp;quot;gamma&amp;quot;; break; case 4: answer = &amp;quot;delta&amp;quot;; break; } // Only change code above this line return answer; }  需要注意的是，这里的比较是用===，而且要注意，如果不写break，会继续匹配下去</description>
    </item>
    
    <item>
      <title>HTML Basic</title>
      <link>https://wushaoqiang.github.io/posts/front-end/html-basic/</link>
      <pubDate>Tue, 21 May 2019 00:04:35 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/front-end/html-basic/</guid>
      <description>Tag &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt;&amp;lt;/html&amp;gt; &amp;lt;head&amp;gt;&amp;lt;head&amp;gt; 通常是放title、meta、link、script、style的地方 &amp;lt;link&amp;gt; refer to an external CSS file &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt; 网页的标题 &amp;lt;body&amp;gt;&amp;lt;/body&amp;gt; 网页的主体 &amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt; 标题h1-h6 &amp;lt;p&amp;gt;&amp;lt;\p&amp;gt; 段落 &amp;lt;hr&amp;gt; 分割线 &amp;lt;br&amp;gt; line break &amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt; 这个会将里面的内容输出，空格换行等都能被显示(pre-formatted text) &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; container for element &amp;lt;span&amp;gt; container for text &amp;lt;iframe&amp;gt; display a web page within a web page  Attr Some suggestions you should know:
 HTML5 does not require lowercase attribute name, but everybody should use lowercase in HTML
 HTML5 does not require quotes around attribute values, but everybody should quote attribute values</description>
    </item>
    
  </channel>
</rss>