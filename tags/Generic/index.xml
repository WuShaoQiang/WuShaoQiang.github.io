<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Generic on Gavin&#39;s Blog</title>
    <link>https://wushaoqiang.github.io/tags/Generic/</link>
    <description>Recent content in Generic on Gavin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Apr 2019 19:55:21 +0800</lastBuildDate>
    
	<atom:link href="https://wushaoqiang.github.io/tags/Generic/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang 泛型</title>
      <link>https://wushaoqiang.github.io/posts/golang-generic/</link>
      <pubDate>Fri, 26 Apr 2019 19:55:21 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/golang-generic/</guid>
      <description>笔者今天参加了一个面试，笔试第一题泛型，因为Go里没有泛型，因此对此毫无概念，开这篇文章解决这个问题
泛型是什么 类型的参数化，在静态语言里，类型尤为重要，虽然Go里interface{}接口可以传入任何类型，但这不利于错误检查(程序不会在编译的时候检查到错误，而是在运行时出错，这就很不爽了)
比如我们需要一个int双向链表，这个时候我们就要写一个结构体大概是
type LinkListNode struct { Value int Next *LinkListNode Prev *LinkListNode } type LinkList struct { len int head *LinkListNode tail *LinkListNode }  如果我们还要写一个字符串的链表，这个时候将Value的类型改成string就行了，其它不用变，如果我们还要..balabala，可能就要定义上百个结构体了，到时候代码全是结构体
有些同学说，用接口不就可以了吗？用接口不就无法实现类型的判断了吗，万一程序哪个地方本应该收到int，却收了一个string，然后程序boom
关于网上很多网友使用interface来达到所谓的泛型，我是越看越像多态呀，并且还是达不到泛型所能提供的类型保护啊，虽然算法确实可以复用了(有些)
泛型的目的是减少代码的重复性，也就是增加重用性，还能够确定数据类型，比如Java中的一个例子
class Factory&amp;lt;T&amp;gt;{ private T value; public T getValue() { return value; } public void setValue(T v) { this.value = v; } }  T我可以是字符串，也可以是整数等，或者是自己定义的结构体。但是一旦定下来，创建了的变量类型就不能变了
所以我说了那么多。。怎么实现啊
实现 Go2草稿中有提到这个话题Go 2 Draft Designs
目前只是一个草稿，并且是由Gopher们共同推进的一个话题，所以说现在Go内置里面还未实现泛型
笔者也去看了一些关于泛型的讨论，到最后都还是建议不要在现阶段写泛型程序，因为Go有一个很本质的特点，就是简单写、简单读，如果通过一些自己的&amp;rdquo;创造&amp;rdquo;而造成别人阅读代码困难，那是得不偿失
所以真香，还是用回多态吧，有机会再详细阅读一下草稿
对此Go2还对错误处理进行了强烈的讨论，笔者也希望以后写Go不用一大堆错误处理了。。真的看到眼花
这里是Go2官方对这些修改的想法视频</description>
    </item>
    
  </channel>
</rss>