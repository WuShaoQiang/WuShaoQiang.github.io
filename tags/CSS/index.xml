<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSS on Gavin&#39;s Blog</title>
    <link>https://wushaoqiang.github.io/tags/CSS/</link>
    <description>Recent content in CSS on Gavin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Jul 2019 15:01:30 +0800</lastBuildDate>
    
	<atom:link href="https://wushaoqiang.github.io/tags/CSS/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CSS Basic Property</title>
      <link>https://wushaoqiang.github.io/posts/front-end/css-basic-property/</link>
      <pubDate>Sat, 13 Jul 2019 15:01:30 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/front-end/css-basic-property/</guid>
      <description>最基本的一些属性
text-align 文本对齐方式
 justify 对齐文本容器的左右两边
 center 每一行左右间距一样
 right
 left
  width 指定容器大小，可以接受不同的单位
常见单位：
 px 像素
 % 百分比
 em 根据父元素的倍数
 rem 根据根元素的倍数
 vh view-high
 vw view-width
 max/min
  刚开始学习前端会不知道这个百分比是以什么为基准的
宽度会相对于父元素的宽度 高度会相对与父元素的高度 字体大小会相对父元素字体大小 边界是相对自身的  一些标签  strong 加粗
 u 下划线
 em 斜体
 s 横线(画在字体中间)
 hr 水平线(无close tag)
  box-shadow  The box-shadow property takes values for offset-x (how far to push the shadow horizontally from the element), offset-y (how far to push the shadow vertically from the element), blur-radius, spread-radius and a color value, in that order.</description>
    </item>
    
    <item>
      <title>CSS Basic</title>
      <link>https://wushaoqiang.github.io/posts/front-end/css-basic/</link>
      <pubDate>Sat, 13 Jul 2019 13:46:54 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/front-end/css-basic/</guid>
      <description>主要记录一下CSS的基本语法
以标签来选择 以标签来选择可能并不是很好的选择，一旦项目规模大，这种是不好管理的
后代选择器 div strong //这个是指凡是在div下面的strong标签，都会起作用 要注意 后代并不是单单指一代 子代选择器 div&amp;gt;strong //这个和后代选择器很大的不同就是这个只会选择子代 相邻兄弟选择器 div&amp;gt; p+h1 //二者有共同的父元素  id、class选择器 id
#pro{ }  class
.important{ }  也可以组合一些，下面给一些例子
.important.warning{ }  这个属性要在class=&amp;quot;important warning&amp;quot;同时拥有这两个属性才可以有这里面的样式
或者
.important p{ }  属性选择器 选择属性
a[href]{ color: red; }  只改变有href属性的a标签</description>
    </item>
    
    <item>
      <title>CSS Flexble</title>
      <link>https://wushaoqiang.github.io/posts/front-end/css-flexble/</link>
      <pubDate>Fri, 12 Jul 2019 19:30:30 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/front-end/css-flexble/</guid>
      <description>今天来学习一下布局方式
现在主流的布局方式flexbox
Reference https://css-tricks.com/snippets/css/a-guide-to-flexbox/
Basic display: flex就将这个block变成了flexbox
首先，我们要先搞明白container和item的关系
一般来说item是最小的单位，也就是一个东西(比如：按键&amp;hellip;)
container就是我们的block，这个就是在页面设计的时候考虑要如何放置我们的block，container是可以嵌套的
Axis For rows, the main axis is a horizontal line and for columns it is a vertical line.
首先要搞懂轴的概念
轴的方向是和flex-direction相关联的
根据参数我们可以很快确定轴的方向
row //main 左到右 cross 上到下 column //main 上到下 cross 左到右 row-reverse //... column-reverse //...  比如flex-direction: row，那么就按照上面这个图的方向
 主方向为横向(也就是item的排列方向)
 cross方向为纵向
  我们后面说到的属性可能会和轴有联系
而这篇文章也是假设了flex-direction: row
flex-wrap 可选参数
nowrap (default) //这个就是将所有item按一个方向排列并且不会，并且只有一行 wrap //这个相对上面就会进行换行 wrap-reverse //反转,就是和wrap反过来，从底部到顶部  可以看出这个和两个轴都有关系
先在main轴排列，不过空间可以wrap到cross轴</description>
    </item>
    
  </channel>
</rss>