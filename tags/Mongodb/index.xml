<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mongodb on Gavin&#39;s Blog</title>
    <link>https://wushaoqiang.github.io/tags/Mongodb/</link>
    <description>Recent content in Mongodb on Gavin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 May 2019 19:39:42 +0800</lastBuildDate>
    
	<atom:link href="https://wushaoqiang.github.io/tags/Mongodb/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mongodb Installation And Config</title>
      <link>https://wushaoqiang.github.io/posts/mongodb-installation-and-config/</link>
      <pubDate>Sat, 11 May 2019 19:39:42 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/mongodb-installation-and-config/</guid>
      <description>总结一下最近在配置MongoDB时遇到的坑吧
首先,在搜索安装教程的时候,很多文章写的是直接安装.tar包,然后解压缩来用
嗯,确实是个直接的方法,用起来也可以,只是稍微麻烦自己去设置环境而已
直接下载tar包 解压后,要将/bin添加到环境变量
然后还要自己创建一个mongod.conf,往里面配置一些东西.或者可以直接在每次开启mongod的时候加入参数(比较麻烦)
这里是我初步的一个配置文件
# mongod.conf # for documentation of all options, see: # http://docs.mongodb.org/manual/reference/configuration-options/ # Where and how to store data. storage: dbPath: /home/shelljo/mongodb/data/db journal: enabled: true # engine: # mmapv1: # wiredTiger: # where to write logging data. systemLog: destination: file logAppend: true path: /home/shelljo/mongodb/log/mongod.log # network interfaces net: port: 27017 bindIp: 0.0.0.0 # how the process runs processManagement: timeZoneInfo: /usr/share/zoneinfo security: authorization: enabled #operationProfiling: #replication: #sharding: ## Enterprise-Only Options: #auditLog: #snmp:  其实这里面还遇到一些别的坑,不太记得了,我搜索了几篇关于安装的教程都是这个样子</description>
    </item>
    
    <item>
      <title>Mongodb Role</title>
      <link>https://wushaoqiang.github.io/posts/mongodb-role/</link>
      <pubDate>Sat, 11 May 2019 19:39:35 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/mongodb-role/</guid>
      <description>参照 User Management Methods
build-in role
这篇文章主要介绍一下关于role的概念,希望读者还是以官网为主,本文为辅
简介 毫无以为,设置role是为了方便管理权限问题,保证数据库的一个安全使用(不然谁都可以删库跑路那还怎么搞)
所以这也算是一个很必要知道的东西
本文只讨论build-in role,不讨论自己设计的role
笔者会一一尝试每一个role
首先 MongoDB对普通的数据库只能添加database user and database administration的role
对admin数据库,则可以添加任何其它类型的role
Database User Role read 简单来说就是只提供对某个数据库读的权利(细节可以上官网上看具体描述)
例如db.collections.find()
我们如何添加呢,这里简单讲一下,后面的都一样
use admin //进入admin database db.createUser({user:&amp;quot;%s&amp;quot;,pwd:&amp;quot;%s&amp;quot;,roles:[{role:&amp;quot;read&amp;quot;,db:&amp;quot;%s&amp;quot;}]})  其中%s是大家自己选择的意思
readWrite 同上多了写的权限
Database Administration Roles dbAdmin 提供权限运行管理类的任务
例如schema-related tasks,indexing and gathering statistics
但是这个role不能够管理user and role management
userAdmin 提供能够在当前database修改roles和users的权利
注意:这样的一个权限代表着它是这个database的superuser,如果在admin database上设置了这种权限意味着间接提供了超级权限(可以看到集群的数据库了)
所以用这个权限的时候要小心点
dbOwner 这个就集成了readWrite,dbAdmin and userAdmin
Cluster Administration Roles 由于笔者对集群化了解还比较浅薄,这里就直接做一些简单翻译
这些administration就不像之前那样是指定某一个数据库了,这是管理整个系统的role
clusterAdmin 这是cluster的最高权限,结合了clusterManager,clusterMonitor,hostManager,additionally dropDatabase action
这是一个可以删库的权限,可见其权限很高了吧</description>
    </item>
    
    <item>
      <title>Golang Mongodb</title>
      <link>https://wushaoqiang.github.io/posts/golang-mongodb/</link>
      <pubDate>Fri, 10 May 2019 21:17:02 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/golang-mongodb/</guid>
      <description>简单收集一些基本操作,作为一个笔记查找
参考官方文章
package main import ( &amp;quot;context&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;log&amp;quot; &amp;quot;go.mongodb.org/mongo-driver/bson&amp;quot; &amp;quot;go.mongodb.org/mongo-driver/mongo&amp;quot; &amp;quot;go.mongodb.org/mongo-driver/mongo/options&amp;quot; ) // You will be using this Trainer type later in the program type Trainer struct { Name string Age int City string } func main() { // Rest of the code will go here // Set client options clientOptions := options.Client().ApplyURI(&amp;quot;mongodb://localhost:27017&amp;quot;) // Connect to MongoDB client, err := mongo.Connect(context.TODO(), clientOptions) if err != nil { log.Fatal(err) } // Check the connection err = client.</description>
    </item>
    
    <item>
      <title>Mongodb Data Modeling Introduction</title>
      <link>https://wushaoqiang.github.io/posts/mongodb-data-modeling-introduction/</link>
      <pubDate>Fri, 10 May 2019 18:54:43 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/mongodb-data-modeling-introduction/</guid>
      <description>原文
Flexible Schema 不像SQL的数据库一样,Mongodb不需要我们准确定义一个数据格式的规范
也就是说,一个collection里面的document不一定要每个字段都一样,我们也可以实时的更新document的字段(增加或减少)
当然,有些时候为了让数据保持统一,Mongodb也可以让我们自定义collection的validation
Document structure  how the application represents relationships between data
 Embedded Data 这是官方推荐的一种数据结构
 For many use cases in MongoDB, the denormalized data model is optimal.
  This data model facilitates atomic operations.
 当一个写操作(insertOne or insertMany),对每一个document的修改都是atomic,但是并不是每一次改一个document
References 这种就又是关系型了
Data Use and Performance 当我们更侧重最近的数据的时候 &amp;ndash;使用capped collection
如果是侧重全局数据的读取 &amp;ndash;使用索引会增加性能
Document Growth and MMAPv1 当document size超过容量的时候,MongoDB会扩容</description>
    </item>
    
    <item>
      <title>Mongodb Schema Validation</title>
      <link>https://wushaoqiang.github.io/posts/mongodb-schema-validation/</link>
      <pubDate>Fri, 10 May 2019 16:06:32 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/mongodb-schema-validation/</guid>
      <description>Schema Validation MongoDB 提供了模式验证,就像SQL里面的结构类型检查一样
提前说一下,这些validation不能够设置在admin local config数据库,也不能设置在以system.*为名的collection
如果是还未创建的collection
 use db.createCollection() with the validator option.
 如果是已经创建了的collection
 use collMod command with the validator option.
 这里还提供了两个options
validationLevel 控制检查的程度 模式有两种:strict(default) and moderate,To disable validation entirely, you can set validationLevel to off. validationAction 当不符合规范的时候的响应动作(发出error,直接拒绝,还是warn然后接收) 模式有两种:error(default) and warn.  如果我们要具体一个JSON格式
 use the $jsonSchema operator in your validator expression.
 官网例子
db.createCollection(&amp;quot;students&amp;quot;, { validator: { $jsonSchema: { bsonType: &amp;quot;object&amp;quot;, required: [ &amp;quot;name&amp;quot;, &amp;quot;year&amp;quot;, &amp;quot;major&amp;quot;, &amp;quot;gpa&amp;quot;, &amp;quot;address.</description>
    </item>
    
    <item>
      <title>Mongodb Command</title>
      <link>https://wushaoqiang.github.io/posts/mongodb-command/</link>
      <pubDate>Fri, 10 May 2019 00:03:44 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/mongodb-command/</guid>
      <description>关于数据库和collection的操作 db.createCollection() // create a collection db.dropDatabase() // delete a db show collections // show all collections in db show dbs // show all db use db // create if not exist db.collection_name.drop() // delete a collection  插入操作 db.collection.insert({}) //insert one db.collection.insert([{},{}]) //insert many db.collection.insertMany([{},{}]) //insert many db.collection.insertOne({}) //insert one  查询操作 db.collection.find() //find all documents db.collection.find().pretty //much easier to read db.inventory.find( { status: &amp;quot;D&amp;quot; } ) // selects from the inventory collection all documents where the status equals &amp;quot;D&amp;quot; db.</description>
    </item>
    
  </channel>
</rss>