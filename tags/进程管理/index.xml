<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>进程管理 on Gavin&#39;s Blog</title>
    <link>https://wushaoqiang.github.io/tags/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</link>
    <description>Recent content in 进程管理 on Gavin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Oct 2019 21:46:02 +0800</lastBuildDate>
    
	<atom:link href="https://wushaoqiang.github.io/tags/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux Process Scheduler</title>
      <link>https://wushaoqiang.github.io/posts/linux/linux-process-scheduler/</link>
      <pubDate>Sun, 27 Oct 2019 21:46:02 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/linux/linux-process-scheduler/</guid>
      <description>概述 Linux调度器的一个杰出的特性是它不需要时间片(time slice)的概念
经典的调度系统需要分别对进程计算其时间片，进程会运行直至时间片用完。等到所有时间片都执行完后又会再次计算，从而进入下一次执行。
在现在的Linux内核里，每次调用调度器的时候，它会挑选具有最高等待时间(wait_runtime)的进程。这个进程被维护在一颗红黑树，因此就是最左边的那个叶子节点
策略 策略是整个调度算法的核心，它决定了调度哪些应该被执行的进程，并且能够最大化利用资源
Linux提供三种策略
 SCHED_NORMAL(一般进程，CFS)
 SCHED_FIFO(实时进程，无时间概念)
 SCHED_RT(实施进程，有时间概念)
  IO消耗性和CPU消耗性 简单理解一下调度器所要面对的两种极端的进程，一般的进程会处于这两种极端进程之间
进程可大致被分为两种
 IO消耗性
 CPU消耗性
  从名字上面可以看出两种进程所需要的资源种类是不同的。这里的IO不仅是表示硬盘、内存等物理的IO，网络等IO也包含在内
举个例子，编辑器的进程就属于IO消耗型。而我们写的算法题一般都是CPU消耗性
为了更好的体验，我们希望IO消耗性的进程能够及时响应(当IO满足条件后)，也希望CPU消耗性能够尽可能利用CPU资源
但两者是冲突的，假设我们只有一个CPU，我们希望IO消耗性的进程能够尽快响应，因此这个进程所被调度的时间(RUNNING的时间)会更多。这样就导致其它的CPU消耗性进程被调度的时间减少，执行总时间会上升。
进程优先级 ps -eo pid,nice,rtprio,command  执行上面这条命令会显示进程ID nice值 实时优先级 命令
其中nice值和实时优先级就是描述进程优先级的字段
一般来说，实时进程的数量会比一般进程的数量少很多，就像我自己的电脑，执行上面的命令后得到的rtprio都是-，表明没有一个实时进程
这些优先级都是用数字表示的
 nice(-20~19，一般默认是0)，数字越小，优先级越高
 rtprio(0~99)，数字越大，优先级越高
  因此这两种优先级的单调性还刚好相反
优先级也是调度器决定给进程分配资源的一个重要指标
时间片 我们在概述讲到，Linux的CFS是不需要时间片的，这里这个时间片指的是绝对的时间片(具体的运行时间)
在CFS中，抢占一个进程是根据新的可运行的进程消耗了多少的处理器使用比，如果消耗的使用比要比当前进程要小，那么新进程立刻投入运行。否则推迟
还是上面编辑器和算法的例子，当它们被分配的资源的各50%的时候，由于算法是CPU消耗性，那么它所消耗的资源会比编辑器的多，因此在编辑器被唤醒的时候，调度器会比较这两者，发现编辑器所消耗的资源要比算法小，因此编辑器能够抢占算法，获得执行权利
这也说明，两者的执行时间也不是对半分的(相对经典调度器，时间片应该是一样的)，CFS的做法是选择运行最少的进程作为下一个运行进程
这种控制调度时间的方法比较有效的解决了我们之前所说的资源利用问题，以及响应问题</description>
    </item>
    
    <item>
      <title>Linux Process do_fork</title>
      <link>https://wushaoqiang.github.io/posts/linux/linux-process-dofork/</link>
      <pubDate>Thu, 24 Oct 2019 20:08:00 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/linux/linux-process-dofork/</guid>
      <description>上一篇说fork、clone的时候，可以看到它们都是调用了do_fork，这也很好的解释了为什么这两个系统调用如此相似了，也解释了很多我们平时听过的结论(不再赘述)
do_fork大致流程 do_fork的大致代码如下
/* * Ok, this is the main fork-routine. * * It copies the process, and if successful kick-starts * it and waits for it to finish using the VM if required. */ long do_fork(unsigned long clone_flags, unsigned long stack_start, struct pt_regs *regs, unsigned long stack_size, int __user *parent_tidptr, int __user *child_tidptr) { struct task_struct *p; int trace = 0; long nr; /* * Do some preliminary argument and permissions checking before we * actually start allocating stuff */ // 这里是一些clone_flag的检查 if (clone_flags &amp;amp; CLONE_NEWUSER) { if (clone_flags &amp;amp; CLONE_THREAD) return -EINVAL; /* hopefully this check will go away when userns support is * complete */ if (!</description>
    </item>
    
    <item>
      <title>Linux Process Fork&amp;Clone</title>
      <link>https://wushaoqiang.github.io/posts/linux/linux-process-fork/</link>
      <pubDate>Thu, 24 Oct 2019 19:24:30 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/linux/linux-process-fork/</guid>
      <description>简单的fork 之前也有大致介绍过fork，简单来说就是&amp;rdquo;复制&amp;rdquo;一个task_struct，其实系统调用的sys_fork比较简单
int sys_fork(struct pt_regs *regs) { return do_fork(SIGCHLD, regs-&amp;gt;sp, regs, 0, NULL, NULL); }  我们可以看到，主要是do_fork的逻辑，在这里传入了SIGCHLD表明子进程终止后发送SIGCHLD信号通知父进程
像sys_vfork和sys_clone其实都是调用了do_fork，区别大多在于传入的标志位(flag)不同
int sys_vfork(struct pt_regs *regs) { return do_fork(CLONE_VFORK | CLONE_VM | SIGCHLD, regs-&amp;gt;sp, regs, 0, NULL, NULL); }  可以看到是多了一些flag在sys_vfork调用的参数上
do_fork /* * Ok, this is the main fork-routine. * * It copies the process, and if successful kick-starts * it and waits for it to finish using the VM if required. */ long do_fork(unsigned long clone_flags, unsigned long stack_start, struct pt_regs *regs, unsigned long stack_size, int __user *parent_tidptr, int __user *child_tidptr)  我们可以简单的理解这些参数的意义</description>
    </item>
    
    <item>
      <title>Linux Process Identifier</title>
      <link>https://wushaoqiang.github.io/posts/linux/linux-process-identifier/</link>
      <pubDate>Wed, 23 Oct 2019 20:11:58 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/linux/linux-process-identifier/</guid>
      <description>接触Linux系统也有一年时间了，大部分接触过Linux系统的人也都清除Linux依靠各种ID来实现区分
这里面包括
 PID
 SID
 PGID(Process Group ID)，值为进程组组长的PID
 TGID(Thread Group ID)，如果是单线程，则与PID一样
  初学者也能知道，PID是进程的唯一标识(Identifier)，再结合之前说的Namespace，我们应该换一种说法PID是某个Namespace下的进程唯一标识
引入了Namespace之后，我们对ID会有两种
 Global ID
 Local ID
  其实它们也类似，只是Global ID是boot的时候的第一个Namespace，因此我们叫它做整个系统的Namespace，Global也因此得名
Local ID就是不同的Namespace下面的ID，也非常好理解
task struct 在task struct里面，有
1278 pid_t pid; 1279 pid_t tgid;  其中pid_t一般是32bit的int，因此可以包含足够的ID
但这里面没有pgid以及sid，这些是存储在了signal字段里面
PID不仅仅是数字 在我们大部分人的认知下，PID就是一个整数，用来标识进程
但是在Linux下，需要维护PID之间的关系，比如所处的Namespace
Linux下的PID Namespace 在Linux下的PID Namespace是有层级关系的，init所处的global PID Namespace是处于第0级，要创建新的PID Namespace就会在其父进程的Namespace的等级里加一
也就是说Namespace level低的能够看到Namespace level高的，反过来则不行。这带来的结果就是，一个进程(Namespace.level &amp;gt; 0)会在不同层级的Namespace上有该层级的唯一PID，所以一个进程有多个PID，分别在不同的Namespace
这也告诉我们一个事情：一个进程的创建需要在每一个Namespace里面新建一个PID，赋值到进程结构体上
struct pid_namespace { struct kref kref; struct task_struct *child_reaper; unsigned int level; struct pid_namespace *parent; .</description>
    </item>
    
    <item>
      <title>Linux Namespace</title>
      <link>https://wushaoqiang.github.io/posts/linux/linux-namespace/</link>
      <pubDate>Tue, 22 Oct 2019 21:35:47 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/linux/linux-namespace/</guid>
      <description>Namespace是我最近一两个月才听到的词，但是它其实在早就已经出现，今天就来记录一下我对它的一些浅显的理解
在一般情况下，我们都是以一个全局的角度来看整个linux系统。Namespace的存在使得我们能够换一个角度来看系统的全局属性
在Linux系统中，许多资源都是全局管理的，如PID，UID等。这也是必须的
在如今虚拟化和容器化的博弈中，容器化依靠自身的一些资源利用的优势，取得了不错的市场。其依赖的技术之中就有Namespace。我们来简单比较一下这两者的区别
 虚拟化就是在一台物理机上布置多个虚拟机，每一个虚拟机就像是一台独立的物理机，它拥有完整的内核，完整的系统。所以即使在Windows上，也能够运行Linux的虚拟机(因为内核在虚拟机上)。但也是因为如此，每一个虚拟机都需要有一个完整的操作系统，占用的资源会比较多
 容器化是一个特殊的进程，因此在资源上，它并不需要和虚拟机一样的资源，因为进程都是执行在当前的内核上的。这个进程特殊在哪里呢，它通过Namespace来使得这个进程所看到的系统视觉不一样。比如这个进程本身是PID为10000，但是因为设置了新的Namespace，那么它自己会认为自己的PID为1(因为这是第一个进程，像init进程一样)。因为容器这个进程也还是运行在同一个内核上的，因此并不能像虚拟机一样，将Linux跑在Windows上
  在这里只是简单的说一下，我们可以通过这个例子来发现Namespace在现在的技术上是很火热的
所有的资源都可以通过Namespace抽象出来，使得进程所看到的系统是不同的
创建方法 因为我们在创建进程的时候，通过fork或者clone，这里是有标志位能够表明创建的进程是否和父进程保持一样的Namespace，还是新建一个Namespace
这些标志位比如有 
#define CLONE_NEWUTS // new uts namespace #define CLONE_NEWIPC // new ipc namespace ...  还有就是通过unshare的系统调用，具体可以看man page
nsproxy 在task_struct里有一个字段
1357 /* namespaces */ 1358 struct nsproxy *nsproxy;  其中
14 * A structure to contain pointers to all per-process 15 * namespaces - fs (mount), uts, network, sysvipc, etc. 16 * 17 * &#39;count&#39; is the number of tasks holding a reference.</description>
    </item>
    
    <item>
      <title>Linux Process Types</title>
      <link>https://wushaoqiang.github.io/posts/linux/linux-process-types/</link>
      <pubDate>Tue, 22 Oct 2019 21:16:30 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/linux/linux-process-types/</guid>
      <description>Linux的进程不仅仅是由代码组成，它还包括分配给进程的资源(如内存，文件等)
在Linux上，一个新的进程简单的创建可以通过fork和exec来实现
就好比如我们在shell上面运行一个sleep命令，那么这个命令其实也是通过两个步骤
 fork当前进程一个相同的副本(当前进程为shell)，我们可以这么认为，这两个相同的副本会具有相同的打开文件、工作目录以及内存数据等等，也会有不同的地方，比如PID这些具有唯一性的属性，还有进程之间的关系等(sleep进程的父进程就是shell本身)。
 exec会从一个可执行文件里加载另外一个应用程序(这里是sleep的二进制文件)，然后代替刚才复制出来的副本进程的程序。也就是说exec不会创建新的进程，只是在fork出来的副本上创建新的程序
  这里还要特别说一下，Linux为了解决fork的效率问题，在资源的复制上做了一些改进，使用(Copy-On-Write)的方式来复制副本：也就是说，副本并不是一次性完完全全的复制一份，而是等到其中一个进程要修改内存中的某一个共有的值的时候，才会去复制。否则按照只读的方式&amp;rdquo;共享&amp;rdquo;，后面详细讲一下
要是能大概理解Linux下这些相关进程的创建方式，平时在写一些命令的时候可以对自己写下的命令后面到底运行了哪些东西有个认知。并且这也是一种非常通用的概念
还有一种系统调用叫做clone，和fork相类似，不过clone不产生新的副本，而是共享资源，所以用于实现线程的创建。
在Linux上，一个线程其实也是进程，只是共享了资源
其实还有一个叫vfork，但是现在应该避免去调用它
上面的解释是非常浅显的，并没有道出多少技术细节，想要知道具体的细节，需要参考其中的一些标志位，例如clone就是通过标志位来实现共享资源的类型的。这些需要查阅相关man page来了解
COW Copy-On-Write
我们前面讲到，使用COW主要是因为
 使用大量内存(以共享的方式减少)
 耗费时间(需要复制的时候再赋值，惰性复制)
  因为我们可能在创建一个新进程的时候，完全不需要它的内存数据(两者数据没有关联)，因此直接的复制会导致做了很多无用功
fork还通过只复制其页表的方式来达到物理内存的共享，也就是两个独立的虚拟内存地址指向同样的物理内存
当然，进程之间不应该互相修改物理内存的数据，因此这个页表是只读的
在很多情况下COW都会为我们节省很多时间</description>
    </item>
    
    <item>
      <title>Linux Process Life Cycle</title>
      <link>https://wushaoqiang.github.io/posts/linux/linux-process-life-cycle/</link>
      <pubDate>Mon, 21 Oct 2019 20:23:27 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/linux/linux-process-life-cycle/</guid>
      <description>我们知道，现在的操作系统，给用户的感觉都是多任务执行的，可能执行的任务(Process)要比CPU还多
这个时候电脑程序看起来还是一起跑的
在Linux的Process Management里面，通过不断的让Scheduler交换执行进程，就可以实现这样的效果
State 这里先来了解一下关于进程生命周期的几个状态
 R(Running or Runnable)是指这个Process正在占用一个CPU，处于执行状态。或者，它处于可被执行的状态
 S(Interruptible Sleep)这种状态表示进程正在等待事件发生，这种情况下是可接收信号的，等到等待的时间发生再次满足Runnable的条件时，会置为R
 D(Uninterruptible Sleep)与上面的区别，这种状态是无法接收信号的
 T(Stopped)这里是暂停或者停止，比如在使用debugger的时候
 Z(Zombie)状态发生在进程被结束，但是数据还有部分残留在Process table里，这个时候在等待父进程调用wait4
  这些状态在linux源码里的linux/sched.h里面有定义
181 #define TASK_RUNNING 0 182 #define TASK_INTERRUPTIBLE 1 183 #define TASK_UNINTERRUPTIBLE 2 184 #define __TASK_STOPPED 4 185 #define __TASK_TRACED 8 186 /* in tsk-&amp;gt;exit_state */ 187 #define EXIT_ZOMBIE 16 188 #define EXIT_DEAD 32 189 /* in tsk-&amp;gt;state again */ 190 #define TASK_DEAD 64 191 #define TASK_WAKEKILL 128 192 #define TASK_WAKING 256 193 #define TASK_STATE_MAX 512  其中TRACED是调用ptrace时用的，主要是为了区分STOPPED</description>
    </item>
    
    <item>
      <title>Linux 进程管理</title>
      <link>https://wushaoqiang.github.io/posts/linux/linux-process-management/</link>
      <pubDate>Thu, 25 Apr 2019 17:04:19 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/linux/linux-process-management/</guid>
      <description>进程状态  R 正在运行或在运行队列
 D 不可中断，进程不会因为信号被唤醒，只能等待中断发生
 S 中断，等待某个事件完成或者被信号唤醒
 Z 僵死，进程已经终止但其父进程没有用wait()或在waitpid()来释放它
 T 停止，可能是收到控制信号，也可能是被跟踪
  相关命令 ps,pstree,top(htop),jobs,kill，nice，nohup
Crtl+c:终结进程
Ctrl+z:暂停进程
ps(Process Status) ps 只会给当前终端中运行的进程
ps -a Select all processes except both session leaders (see getsid(2)) and processes not associated with a terminal.
ps -u root显示root用户的process，这里root也可以是别的用户名
ps -l 相对ps，会显示父PID等信息
ps aux 显示所有process
ps -ef 详细显示所有process
pstree pstree 进程树
pstree -p 显示PID
pstree (username) 显示用户的进程
jobs jobs 查看后台运行的进程
fg %num 将后台程序转移到前台</description>
    </item>
    
  </channel>
</rss>