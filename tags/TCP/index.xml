<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TCP on Gavin&#39;s Blog</title>
    <link>https://wushaoqiang.github.io/tags/TCP/</link>
    <description>Recent content in TCP on Gavin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 Apr 2019 15:17:17 +0800</lastBuildDate>
    
	<atom:link href="https://wushaoqiang.github.io/tags/TCP/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TCP 流量控制</title>
      <link>https://wushaoqiang.github.io/posts/computer-network/tcp-flow-control/</link>
      <pubDate>Mon, 22 Apr 2019 15:17:17 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/computer-network/tcp-flow-control/</guid>
      <description>流量控制是为了匹配发送方和接收方的数据交换速度，如果发送方发的太快，接收方的缓存可能会溢出
还要提醒一下流量控制和拥塞控制是两码事
TCP通过让发送方维护一个称为接收窗口的变量来提供流量控制
在接收方一定要满足
LastByteRcvd - LastByteRead &amp;lt;= RcvBuffer
用rwnd表示还有多少空间可以用，所以rwnd = RcvBuffer - (LastByteRcvd - LastByteRead)
在TCP报文首部里有一个叫做接收窗口，这个就是接收者告诉发送者rwnd的
在发送方，通过将未确认的数据量控制在值rwnd以内，就可以保证接收者不会缓存溢出了
UDP是不提供流量控制的，所以UDP很有可能会出现缓存溢出</description>
    </item>
    
    <item>
      <title>TCP 拥塞控制</title>
      <link>https://wushaoqiang.github.io/posts/computer-network/tcp-congestion-control/</link>
      <pubDate>Mon, 22 Apr 2019 13:11:08 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/computer-network/tcp-congestion-control/</guid>
      <description> TCP必须使用端到端拥塞控制而不是网络辅助的拥塞控制
TCP所采用的方法是让每一个发送方根据所感知到的网络拥塞程度来限制其能向连接发送流量的速率
三个问题 我们如何知道网络开始拥塞？
我们如何限制发送方发送速率
当发送方感受到拥塞时，用什么算法去限制其发送速率
如何知道网络拥塞 TCP是不会有一种特殊的包叫“我拥塞啦”
接收到Ack 没有拥塞，可以提速
没接收到Ack 可能拥塞，降速
如何限制发送方速率 改变cwnd
当一切顺利，cwnd增加；丢包，cwnd减少
我们发送方被限制在min(rwnd,cwnd)
LastByteSent - LastByteAcked &amp;lt;= cwnd
rwnd和cwnd是不同的，前者是表示接收方的buffer还有多少能用，后者是改变在网络上的容量
用什么算法来限制速度 我们希望TCP能在不发生拥塞情况上利用最大的带宽
所以发送方速率有点像三角波，上上下下，因为要尽可能利用带宽又不要制造拥塞
慢启动 在包被收到的情况下 cwnd每次是之前的两倍1,2,4,8,16...，直到大于或等于阈值，切换到拥塞避免
在包没有被收到的情况下 三次冗余Ack 进入快速恢复
超时 阈值=cwnd/2
把cwnd变为1
阈值(threhold) 记录上一次拥塞时一半的cwnd
拥塞避免 在包被接收到的情况下 线性增长，每次在所有分片的Ack被接收到的情况下(一个RTT)，增加一个MSS
在包没有被接收到的情况下 三次冗余Ack 进入快速恢复
超时 切换到慢启动
快速恢复 每个冗余的Ack对cwnd增加一个MSS，当丢失报文段的Ack最终回到时，再减少一个MSS
进入拥塞避免状态
出现超时，进入慢启动
出现丢包，cwnd设置为1，阈值设置为cwnd的一半
总结一下 三次冗余ACK  阈值设置为cwnd/2
 cwnd设置为阈值(有快速恢复的情况下)
  超时  阈值设置为cwnd/2
 cwnd设置为1(MSS)
  </description>
    </item>
    
    <item>
      <title>TCP 连接 --三次握手和四次挥手</title>
      <link>https://wushaoqiang.github.io/posts/computer-network/tcp-connect/</link>
      <pubDate>Mon, 22 Apr 2019 12:52:03 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/computer-network/tcp-connect/</guid>
      <description> 首先这里所说的握手，是进程之间的握手
三次握手 简单来说就是
A --&amp;gt; B 不承载有效负荷 B --&amp;gt; A 不承载有效负荷 A --&amp;gt; B 可以承载有效负荷  再细致点说就是
 客户端应用程序发起一个TCP连接
 发送报文里有SYN
 收到来自服务器端的SYN&amp;amp;ACK
 再次向服务器端发送ACK
  这里面总共有3次报文，所以为三次握手
最大报文段长度&amp;amp;最大传输单元 最大报文段长度(MSS):一般为1460
最大传输单元(MTU):一般为1500
之说以说一般，是因为一般来说TCP/IP的首部字段加起来是40字节
1500-40=1460
清除认识 当进程通过套接字把数据给到TCP的时候，数据就和进程没关系了，已经全权交给TCP了
为什么不是两次握手？ 这是书本上的一个问题
在我理解，握手其实是为了双方知道对方的初始序列号
 客户端给服务器端发送初始序列号
 服务器端收到了客户端的初始序列号，并且发送服务器端的初始序列号
  如果客户端不产生第三次握手，那么服务器端不知道客户端到底拿到了初始序列号没
 客户端看到回复后就知道服务器端拿到了自己的初始序列号，于是也和服务器端说明，已经拿到它的初始序列号了  四次挥手  客户端应用程序发起关闭连接
 发送报文里包含FIN
 服务器端发送一个ACK表示接收到了
 服务器端再次发一个FIN
 客户端给服务器端发一个ACK
 等待一会，资源就释放了
  </description>
    </item>
    
    <item>
      <title>TCP --报文</title>
      <link>https://wushaoqiang.github.io/posts/computer-network/tcp-message-field/</link>
      <pubDate>Mon, 22 Apr 2019 12:14:31 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/computer-network/tcp-message-field/</guid>
      <description> 之间写过一个关于《计算机网络(原书第六版)：自顶向下方法》的一部分笔记，当时没继续写下去是因为觉得一个篇幅太多了，决定分开写，这样可能可以更加详细点，也算是第二次的复习吧
这篇主要讲报文
先看看报文的格式
首先，TCP是运输层的协议，IP是网络层的协议，一般运输层协议会确定端口号，网络层协议则确定IP地址
 源/目的端口号
 序号/确认号：是用来双方实现可靠传输的(下面详细讲)
 接收窗口字段：用于流量控制(可能会在别的篇幅讲)
 首部长度：由于有选项这个字段，使得TCP的首部长度是可以变化的，不过通常就是20字节
 标志字段/紧急指针：标志字段包括确认字段有效、建立和拆除连接、紧急数据。紧急指针指向紧急数据
  序号/确认号 一条TCP连接的双发均可随机地选择初始序号，可能是0和4294967295之间的任意值
我们假设初始序号为0
A --&amp;gt; B Seq=42,ACK=79,data=1 B --&amp;gt; A Seq=79,ACK=43,data=2 A --&amp;gt; B Seq=43,ACK=80,data=3 ...  在我理解
序号是标识我要发送给对方的数据
确认号是标识我需要对方发送给我的数据
所以上面场景就是
A给B发序号为42的数据，并且向B要序号为79的数据 B收到了A的数据，并且返回A所要的序号为79的数据，并且B还想要A序号为43的数据 以此类推...  </description>
    </item>
    
  </channel>
</rss>