<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>中断&#34; on Gavin&#39;s Blog</title>
    <link>https://wushaoqiang.github.io/tags/%E4%B8%AD%E6%96%AD/</link>
    <description>Recent content in 中断&#34; on Gavin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Nov 2019 11:16:26 +0800</lastBuildDate>
    
	<atom:link href="https://wushaoqiang.github.io/tags/%E4%B8%AD%E6%96%AD/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux Interrupt Top Halves</title>
      <link>https://wushaoqiang.github.io/posts/linux/linux-interrupt/</link>
      <pubDate>Fri, 01 Nov 2019 11:16:26 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/linux/linux-interrupt/</guid>
      <description>简单说说 由于CPU的速度和外围硬件的速度不在一个量级上，为了不会大量耗费CPU的时间(让CPU去检查外围硬件)，由此引用了中断
中断可以这样解释：
 中断本质上是一种特殊的电信号，由硬件设备发向处理器。处理器接收到中断后，会马上向操作系统反映此信号的到来
 中断生成是异步的，因此可以不用和处理器的时钟同步，可以随时产生，因此内核随时可能因为新的中断到来而中断
不同的外设给的中断也不同，因此操作系统可以区分这些中断，这样也才能用合适的中断处理来处理这些中断
可能有些时候会搞混中断和异常的概念
中断是由硬件产生的，并且是异步的。异常是由软件产生的(发生了PANIC)，并且是同步的
中断处理程序 因为中断随时发生，并且它会抢占CPU，因此我们希望中断做的事情能够尽快完成，这样才能让被中断的代码恢复执行(有可能抢占其它中断)
因为有一些中断处理程序的工作量也很多，因此我们一般把中断分为上半部和下半部
中断处理程序是上半部，接收到中断后会立刻开始执行，并且只做有严格时限的工作。这里严格时限说明，我们的中断处理程序不能够包含阻塞(睡眠)的情况
并且这些工作都是在所有中断被禁止的情况下完成的
下半部就是一些能够被推迟的工作，会在一些合适的时机去执行
我们所理解的驱动 我相信很多人都听过驱动，也知道一个新的外设很有可能是需要装驱动的(有些不用)
那么我们平时所谈到的驱动和上面的中断处理程序有上面关系呢？
驱动是和硬件配套的，而中断处理程序只是驱动的一个组成部分，在运行驱动程序的时候，驱动程序会将中断处理程序注册到内核
这个驱动程序一般都是厂商按照规范写好的了
如何注册 在linux/interrupt.h里
request_irq(unsigned int irq, irq_handler_t handler, unsigned long flags, const char *name, void *dev);  其中
 irq是中断号，有些设备是有固定的中断号，而大多数来说都是通过探测获取
 handler就是我们所说的中断处理程序
 flags是一些标志位
 IROF_DISABLED意味着内核在处理中断程序期间，要禁止所有的其他中断(这里是指其它中断线)
 IROF_SAMPLE_RANDOM表明这个设备产生的中断对内核熵池有贡献(和随机数有关)，因此当外设的中断产生数率是不可预估的时候，设置这个可以让它称为熵源
 IRQF_TIMER专门为系统定时器的中断处理准备
 IRQF_SHARED，和IRQF_DISABLED不同，这个标志可以让多个中断处理程序共享中断线。在同一个给定线上注册的每个处理程序必须指定这个标志，否则在每条线上只能有一个处理程序
  name顾名思义就是中断的名字(一般是产生中断的硬件的名字)
 dev用于共享中断线，因为在SHARED模式的时候，需要知道某一个中断所对应的是哪个中断处理程序，所以dev必须是唯一的(这也需要硬件支持)。以及我们还会删除某一条中断线上的某一个中断处理函数(不应该影响别的中断处理函数)
  无论如何，如果中断线正在执行一个中断处理程序，那么这个中断线不会再接收新的中断，直到中断执行完毕
说说我对中断线的理解 在blog最开头，我说到中断是由硬件产生的电信号，最终是通过芯片的管脚来接收这个信号，触发执行相应程序
在我的理解里，这个管脚就是一个中断线，是某一组中断的入口，相同入口的它们需要找到自己的中断处理程序就是靠dev实现
在以前玩单片机的时候，中断就是被我用来处理一些紧急情况，在Linux内核里，貌似有着相似之处
销毁(删除) 清除系统中不需要的驱动程序，在内核里就是将中断处理程序删除了，这里也要用到唯一的dev。如果中断线已经没有中断处理程序了，那么它就会被禁用</description>
    </item>
    
  </channel>
</rss>