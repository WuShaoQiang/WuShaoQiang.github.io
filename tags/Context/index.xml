<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Context on Gavin&#39;s Blog</title>
    <link>https://wushaoqiang.github.io/tags/Context/</link>
    <description>Recent content in Context on Gavin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Apr 2019 19:07:52 +0800</lastBuildDate>
    
	<atom:link href="https://wushaoqiang.github.io/tags/Context/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang Context</title>
      <link>https://wushaoqiang.github.io/posts/golang/golang-context/</link>
      <pubDate>Wed, 24 Apr 2019 19:07:52 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/golang/golang-context/</guid>
      <description>Context又名上下文，在一开始接触这个词的时候就有点迷惑了，开一篇文章把这个困扰了我有一阵子的迷惑解开吧
参考博客理解Go Context机制
Golang的执行单元是goroutine，main也是一个goroutine
上下文，上下则是存在上下层的传递，我们在编写Web后端的时候，接收到一个请求可能会执行一些列的goroutine(数据库，业务层处理)来达到并发效果
这个时候，如果客户端那边取消了呢？如果我们在服务器端检测不到这个信号，那么我们服务器还是会继续服务，直到完成所有服务的时候，发现客户端已经不见了(资源就被浪费了)
所以我们需要在每一个由Request产生的goroutine里面装一个监控，这个监控会告诉程序客户端是否还在等待返回，如果客户端离开，那么程序立即停止对客户端的服务
Context接口 type Context interface { Deadline() (deadline time.Time, ok bool) Done() &amp;lt;-chan struct{} Err() error Value(key interface{}) interface{} }   Deadline会返回一个超时时间，Goroutine获得了超时时间后，例如可以对某些io操作设定超时时间。
 Done方法返回一个信道（channel），当Context被撤销或过期时，该信道是关闭的，即它是一个表示Context是否已关闭的信号。
 当Done信道关闭后，Err方法表明Context被撤的原因。
 Value可以让Goroutine共享一些数据，当然获得数据是协程安全的。但使用这些数据的时候要注意同步，比如返回了一个map，而这个map的读写则要加锁。
  每当我们处理一个Request的时候，都应该从Request里拿一个Context
req,err := http.NewRequest(http.MethodGet,&amp;quot;http://127.0.0.1:8080&amp;quot;,nil) if err != nil { log.Fatalln(err) } ctx := req.Context()   the context is canceled when the client&amp;rsquo;s connection closes
 如果Request的context是nil，那么它会返回一个context.Background()
var ( background = new(emptyCtx) todo = new(emptyCtx) )  方法 我们前面说了，Context是要上下传递的，我们需要达到一种效果： 上面的Context收到了中断信号，下面的也要进行中断</description>
    </item>
    
  </channel>
</rss>