<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JS on Gavin&#39;s Blog</title>
    <link>https://wushaoqiang.github.io/tags/JS/</link>
    <description>Recent content in JS on Gavin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Jul 2019 10:36:10 +0800</lastBuildDate>
    
	<atom:link href="https://wushaoqiang.github.io/tags/JS/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Javascript Array</title>
      <link>https://wushaoqiang.github.io/posts/front-end/javascript-array/</link>
      <pubDate>Sun, 28 Jul 2019 10:36:10 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/front-end/javascript-array/</guid>
      <description>Reference 阮一峰
数组的创建 假设我们创建一个数组
var arr = new Array(10)  其实这个数组是没有key的，但是我们却能够用下标访问，并且可以越界
Object.keys(arr) //[] arr[0] //undefined arr[100] //undefined  一般来说不推荐这种创建数组的方式
var arr1 = [undefined,undefined] Object.keys(arr1) //[&amp;quot;0&amp;quot;,&amp;quot;1&amp;quot;]  静态方法 Array.isArray()
因为typeof对于数组智能返回一个object
所以我们可以用Array.isArray()来判断这个是否为数组
从这里我们可以看到，array也是一个对象
所以会有接下来的方法
valueOf() &amp;amp;&amp;amp; toString()
valueOf 会把数据结构原封不懂的输出
typeof arr.valueOf() //object Array.isArray(arr.valueOf()) //true  说明它又是输出一个数组呀
那么toString就不同了，这个会把元素一个个拆分，然后用逗号隔开组成一个string
//数组 [1, 2, 3, Array(3), &amp;quot;aa&amp;quot;] //toString结果 &amp;quot;1,2,3,4,5,6,aa&amp;quot;  push() pop() shift() unshift()
push和unshift都是往数组增加元素
pop和shift都是减少数组元素
push和pop都是在针对数组后面的元素
shift和unshift都是针对数组前面的元素
join()
这个会返回一个字符串，默认用逗号分隔，也可以传入分隔符
如果是undefined或者null会被转换为空字符串
concat
concat是数组的加法，可以将在原数组的基础上加上传入的参数，返回一个新的数组，原数组不变
要注意的是
如果数组成员包含对象，concat方法返回的是一个浅拷贝，也就是新数组拷贝的是对象的引用</description>
    </item>
    
    <item>
      <title>Javascript Object</title>
      <link>https://wushaoqiang.github.io/posts/front-end/javascript-object/</link>
      <pubDate>Sat, 27 Jul 2019 14:44:02 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/front-end/javascript-object/</guid>
      <description>本篇笔记是学习阮一峰老师的ES6
关于对象 Javascript所有对象都继承自Object
所以一般对象有两种方法集：
 Object本身的方法
 对象实例的方法
  Object() 我们可以使用Object()来强制类型转换，将任意值转换为一个对象
我们可以分为三种情况
 空对象
 Object()
 Object(null)
 Object(undefined)
  需要转换
 Number
 String
 Boolean
  不需要转换
 Array
 Object
 Function
   不需要转换的可以有Object(...) === Object(...) //true
但是Object(undefined) === Object(undefined) //false
静态方法 Object.keys() Object.getOwnPropertyNames()  这两者的区别在于Object.getOwnPropertyNames能够返回不可枚举的属性名
什么叫不可枚举的属性名呢?
类似一个数组包含了两个元素let a = [11,22],那么Object.keys返回的就是[&amp;quot;0&amp;quot;,&amp;quot;1&amp;quot;],而另一个方法返回的是[&amp;quot;0&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;length&amp;quot;]
这里面的length就是一个不可枚举的属性名
不过我们一般情况下是不希望将不可枚举的属性名抽取出来的，所以我们一般是用Object.keys()
Object.prototype.getOwnPropertyDescriptor
这个方法只能够用于自身的属性，作用是给出某个属性的详细信息(属性描述对象)
{ value: 123, //值 writable: false, //是否可写 enumerable: true, //是否可遍历(是否可以用Object.</description>
    </item>
    
    <item>
      <title>Javascript Data Structure</title>
      <link>https://wushaoqiang.github.io/posts/front-end/javascript-data-structure/</link>
      <pubDate>Tue, 09 Jul 2019 21:43:45 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/front-end/javascript-data-structure/</guid>
      <description>array method 内置的Array方法是普遍使用的
push() unshift() pop() shift() splice() //第一个参数的index(包括),第二个参数是数量(表示删除多少个)  splice splice相对前几个方法稍微复杂一点，它的功能也相对强大
当splice传入两个参数的时候
function sumOfTen(arr) { // change code below this line arr.splice(4,2) arr.splice(2,1) arr.splice(0,1) console.log(arr) // change code above this line return arr.reduce((a, b) =&amp;gt; a + b); } // do not change code below this line console.log(sumOfTen([2, 5, 1, 5, 2, 1]));  注意
当你删除了元素之后，索引就已经发生变化了，所以最好的方式就是重后面开始删除
当传入三个参数的时候
这和传入两个参数是完全不一样的
三个参数就是先执行两个参数时的操作，也就是删除从某一个索引开始的n个数据，然后再从索引的位置插入一个数据
function htmlColorNames(arr) { // change code below this line arr.</description>
    </item>
    
    <item>
      <title>Javascript Debugging</title>
      <link>https://wushaoqiang.github.io/posts/front-end/javascript-debugging/</link>
      <pubDate>Tue, 09 Jul 2019 21:19:39 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/front-end/javascript-debugging/</guid>
      <description>Bug一般分为三类
语法错误 运行错误 逻辑错误  往往编辑器帮我们做好了语法错误的检测，因此这个是最简单的，后面两个就要我们自己掌握一些debug的技能去fix这些bugs
log log是一个很好的debug方法，能够在不同阶段看到输出的内容有利于我们找出出错的环节
console.log()  typeof 检测一个值的类型
undefined --&amp;gt; undefined NaN --&amp;gt; Number null --&amp;gt; Object  false 在JavaScript里
false 0 &amp;quot;&amp;quot; NaN undefined null  都被当做falsy，也就是在if判断语句和false作用一样的
out of range 当数组越界的时候，JavaScript返回的是undefined</description>
    </item>
    
    <item>
      <title>Javascript Regexp</title>
      <link>https://wushaoqiang.github.io/posts/front-end/javascript-regexp/</link>
      <pubDate>Mon, 08 Jul 2019 22:46:16 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/front-end/javascript-regexp/</guid>
      <description>这一篇是讲正则表达式(Regular Expression)
Test method 全匹配
let waldoIsHiding = &amp;quot;Somewhere Waldo is hiding in this text.&amp;quot;; let waldoRegex = /Waldo/; // Change this line let result = waldoRegex.test(waldoIsHiding); console.log(result) //true  全匹配是大小写敏感的
多可能性
let petString = &amp;quot;James has a pet cat.&amp;quot;; let petRegex = /dog|cat|bird|fish/; // Change this line let result = petRegex.test(petString);  这样就是一个或关系
忽略大小写
let myString = &amp;quot;freeCodeCamp&amp;quot;; let fccRegex = /freeCodeCamp/i; // Change this line let result = fccRegex.</description>
    </item>
    
    <item>
      <title>Javascript ES6</title>
      <link>https://wushaoqiang.github.io/posts/front-end/javascript-ES6/</link>
      <pubDate>Sun, 07 Jul 2019 16:28:43 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/front-end/javascript-ES6/</guid>
      <description>let vs var 在ES6之前还没有let
var是有一些很严重的缺点的，比如
可以重复定义同名的变量而不会抛错 经常想定义一个局部变量，变成了一个全局变量，也就是shadow和我们平时熟悉的方式不一样  所以我们在定义变量的时候就用let，因为let就是修复了var的一些缺点，和平时的用法一样
const 这个和let差不多，只是只能赋值一次(定义的时候就要赋值)
并且建议const用全部大写的格式
开发建议是：如果变量是不会重新赋值的，那么最好是使用const，除非是预测到要重新赋值就用let
在这里还要强调的一点，赋值是值这个变量的赋值，如
const s = [5,6,7] s = [1,2] //出错，重新赋值 s[2] = 10 //可行，这个不是对s的重新赋值  同理的还有Object、function
Object freeze 可以防止一个Object的属性被修改
Object.freeze(object_name);  Arrow functions () =&amp;gt; {} () =&amp;gt; value //如果是直接返回数据，这个是简化的写法 (arg1,arg2) =&amp;gt; {}  filter map reduce A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.</description>
    </item>
    
    <item>
      <title>Javascript Basic</title>
      <link>https://wushaoqiang.github.io/posts/front-end/javascript-basic/</link>
      <pubDate>Wed, 03 Jul 2019 20:35:35 +0800</pubDate>
      
      <guid>https://wushaoqiang.github.io/posts/front-end/javascript-basic/</guid>
      <description>数组的方法 push 插入数据到数组的后面 pop 取出数组的最后一个数据 shift 取出数组的第一个数据 unshift 插入数据到数组的前面  JS的数组里面的元素是可以不相同的
作用域 当变量没有用var等关键字声明时，这个变量是全局变量，这个可能会导致一些问题
function func(){ funcVar = 1 }  等于号 比较符有两个==和===
在JS里面
1 == &#39;1&#39; //true 1 === &#39;1&#39; //false  ==会在类型不同进行自动转换
===不会进行类型转换
同理!=和!==也是一样
比较符 &amp;gt; &amp;lt; &amp;gt;= &amp;lt;=
这些当类型不同时，也会进行类型转换
Switch function caseInSwitch(val) { var answer = &amp;quot;&amp;quot;; // Only change code below this line switch(val){ case 1: answer = &amp;quot;alpha&amp;quot;; break; case 2: answer = &amp;quot;beta&amp;quot;; break; case 3: answer = &amp;quot;gamma&amp;quot;; break; case 4: answer = &amp;quot;delta&amp;quot;; break; } // Only change code above this line return answer; }  需要注意的是，这里的比较是用===，而且要注意，如果不写break，会继续匹配下去</description>
    </item>
    
  </channel>
</rss>